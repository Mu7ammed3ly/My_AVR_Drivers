
My_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003300  00003394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080018a  0080018a  000034be  2**0
                  ALLOC
  3 .stab         000047c4  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002220  00000000  00000000  00007c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c641  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000eba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ed60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__vector_1>
       8:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_2>
       c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__vector_11>
      30:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 19 	call	0x3232	; 0x3232 <main>
      8a:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 47 19 	jmp	0x328e	; 0x328e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 63 19 	jmp	0x32c6	; 0x32c6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_VoidInit>:

void __vector_11(void) __attribute__((signal));


void TIMER0_VoidInit(void (*copy_TIMER0_Int)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <TIMER0_VoidInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	TIMSK_REG ->TOIE0 = 0b1  ;  //Enable Overflow Interrupt Enable
	TCNT0_REG = PRELOAD_VALUE;
	Timer0_Interrupt = copy_TIMER0_Int;

#elif TIMER0_GENERATION_MODE ==  FAST_PWM0//Choose generation mode as FAST PWM
	DIO_voidSetPinDir(GroupB,PIN3,Output);
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	63 e0       	ldi	r22, 0x03	; 3
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	TCCR0_REG ->WGM00 = 0b1;
     e46:	e3 e5       	ldi	r30, 0x53	; 83
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 64       	ori	r24, 0x40	; 64
     e4e:	80 83       	st	Z, r24
	TCCR0_REG ->WGM01 = 0b1;
     e50:	e3 e5       	ldi	r30, 0x53	; 83
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	80 83       	st	Z, r24
	TCCR0_REG ->COM   = CLR_CM_SET_TOP0; //Clear OC0 on compare match, set OC0 at TOP
     e5a:	e3 e5       	ldi	r30, 0x53	; 83
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7c       	andi	r24, 0xCF	; 207
     e62:	80 62       	ori	r24, 0x20	; 32
     e64:	80 83       	st	Z, r24
	OCR0_REG  = DUTY_CYCLE() ; //Choose Duty cycle
     e66:	ec e5       	ldi	r30, 0x5C	; 92
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	10 82       	st	Z, r1
	TIMSK_REG ->OCIE0 = 0b1 ;//Compare match intterupt enable
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	80 83       	st	Z, r24
	TCCR0_REG ->CS    = PRESCALLER0; //Clock Select Bit Description
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 7f       	andi	r24, 0xF8	; 248
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	80 83       	st	Z, r24
#endif
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <__vector_11>:

void __vector_11(void)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	2f 93       	push	r18
     e98:	3f 93       	push	r19
     e9a:	4f 93       	push	r20
     e9c:	5f 93       	push	r21
     e9e:	6f 93       	push	r22
     ea0:	7f 93       	push	r23
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
     ea6:	af 93       	push	r26
     ea8:	bf 93       	push	r27
     eaa:	ef 93       	push	r30
     eac:	ff 93       	push	r31
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	Timer0_Interrupt();
     eb6:	e0 91 8a 01 	lds	r30, 0x018A
     eba:	f0 91 8b 01 	lds	r31, 0x018B
     ebe:	09 95       	icall
	TCNT0_REG = PRELOAD_VALUE;
     ec0:	e2 e5       	ldi	r30, 0x52	; 82
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	10 82       	st	Z, r1
}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <TIMER0_voidPWM>:
void TIMER0_voidPWM(u8 copy_u8DutyCycle)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <TIMER0_voidPWM+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0_REG ->WGM01 = 0b0;
	TCCR0_REG ->COM   = CLR_CM_SET_TOP0; //Clear OC0 on compare match, set OC0 at TOP
	OCR0_REG  = DutyCycle ; //Choose Duty cycle
	TCCR0_REG ->CS    = PRESCALLER0; //Clock Select Bit Description
#elif TIMER0_GENERATION_MODE ==  FAST_PWM0//Choose generation mode as PWM
	u8 DutyCycle = 0 ;
     ef8:	19 82       	std	Y+1, r1	; 0x01
	DutyCycle = ((F32)((F32)copy_u8DutyCycle/100)*0xff);
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	48 ec       	ldi	r20, 0xC8	; 200
     f1a:	52 e4       	ldi	r21, 0x42	; 66
     f1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	53 e4       	ldi	r21, 0x43	; 67
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDir(GroupB,PIN3,Output);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	63 e0       	ldi	r22, 0x03	; 3
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	TCCR0_REG ->WGM00 = 0b1;
     f50:	e3 e5       	ldi	r30, 0x53	; 83
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	80 64       	ori	r24, 0x40	; 64
     f58:	80 83       	st	Z, r24
	TCCR0_REG ->WGM01 = 0b1;
     f5a:	e3 e5       	ldi	r30, 0x53	; 83
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 60       	ori	r24, 0x08	; 8
     f62:	80 83       	st	Z, r24
	TCCR0_REG ->COM   = CLR_CM_SET_TOP0; //Clear OC0 on compare match, set OC0 at TOP
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 7c       	andi	r24, 0xCF	; 207
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	80 83       	st	Z, r24
	OCR0_REG  = DutyCycle ; //Choose Duty cycle
     f70:	ec e5       	ldi	r30, 0x5C	; 92
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	80 83       	st	Z, r24
	TCCR0_REG ->CS    = PRESCALLER0; //Clock Select Bit Description
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 7f       	andi	r24, 0xF8	; 248
     f80:	84 60       	ori	r24, 0x04	; 4
     f82:	80 83       	st	Z, r24
#endif
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <TIMER1_VoidInit>:

void TIMER1_VoidInit(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_GENERATION_MODE ==  NORMAL1 //Choose generation mode as normal mode

TCCR1A_REG ->WGM10 = 0b0           ;//Normal mode
     f96:	ef e4       	ldi	r30, 0x4F	; 79
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	80 83       	st	Z, r24
TCCR1A_REG ->WGM11 = 0b0           ;
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	80 83       	st	Z, r24
TCCR1B_REG ->WGM12 = 0b0           ;
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	87 7f       	andi	r24, 0xF7	; 247
     fb2:	80 83       	st	Z, r24
TCCR1B_REG ->WGM13 = 0b0           ;
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7e       	andi	r24, 0xEF	; 239
     fbc:	80 83       	st	Z, r24
TCCR1B_REG ->CS1   = PRESCALLER1_8 ;//set Prescaller
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	88 7f       	andi	r24, 0xF8	; 248
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	80 83       	st	Z, r24
//TIMSK_REG  ->TOIE1 = 0b01          ;//Overflow Interrupt Enable

#elif

#endif
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <TIMER1_VoidSetTCNT>:

void TIMER1_VoidSetTCNT(u16 copy_u8Data)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <TIMER1_VoidSetTCNT+0x6>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = copy_u8Data ;
     fde:	ec e4       	ldi	r30, 0x4C	; 76
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	80 83       	st	Z, r24
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <TIMER1_VoidGetTCNT>:
u16 TIMER1_VoidGetTCNT(void)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
return TCNT1 ;
     ffc:	ec e4       	ldi	r30, 0x4C	; 76
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <TIMER1_VoidSetICR>:
void TIMER1_VoidSetICR(u16 copy_u8Data)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <TIMER1_VoidSetICR+0x6>
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = copy_u8Data ;
    1018:	e6 e4       	ldi	r30, 0x46	; 70
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <TIMER1_VoidGetICR>:
u16 TIMER1_VoidGetICR(void)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	return ICR1 ;
    1036:	e6 e4       	ldi	r30, 0x46	; 70
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <WD_timer_voidEnabel>:
void WD_timer_voidEnabel(WDT_SECONDS copy_u8Time)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	89 83       	std	Y+1, r24	; 0x01
	WDTCR_REG ->WDP = copy_u8Time ;
    1050:	e1 e4       	ldi	r30, 0x41	; 65
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	87 70       	andi	r24, 0x07	; 7
    1058:	98 2f       	mov	r25, r24
    105a:	97 70       	andi	r25, 0x07	; 7
    105c:	80 81       	ld	r24, Z
    105e:	88 7f       	andi	r24, 0xF8	; 248
    1060:	89 2b       	or	r24, r25
    1062:	80 83       	st	Z, r24
	WDTCR_REG ->WDE = 0b01        ;
    1064:	e1 e4       	ldi	r30, 0x41	; 65
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	80 83       	st	Z, r24
}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <WD_timer_voidDisabel>:
void WD_timer_voidDisabel(void)
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	WDTCR_REG->WDTOE = 1  ;
    107e:	e1 e4       	ldi	r30, 0x41	; 65
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 61       	ori	r24, 0x10	; 16
    1086:	80 83       	st	Z, r24
	WDTCR_REG ->WDE  = 1  ;
    1088:	e1 e4       	ldi	r30, 0x41	; 65
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	88 60       	ori	r24, 0x08	; 8
    1090:	80 83       	st	Z, r24
	WDTCR_REG ->WDE  = 0  ;
    1092:	e1 e4       	ldi	r30, 0x41	; 65
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	87 7f       	andi	r24, 0xF7	; 247
    109a:	80 83       	st	Z, r24

}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <SPI_voidInit>:

u8 * SPI_recieve = NULL_PTR;
u8 * SPI_recieveFalg = NULL_PTR;

void SPI_voidInit(void)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
	SPCR_REG ->SPIE = DISABLE        ; //Interrupt Enable
    10aa:	ed e2       	ldi	r30, 0x2D	; 45
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 77       	andi	r24, 0x7F	; 127
    10b2:	80 83       	st	Z, r24
	SPCR_REG ->MSTR = MS_SELECT     ;//(Master =1) /(Slave =0) Select
    10b4:	ed e2       	ldi	r30, 0x2D	; 45
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	80 61       	ori	r24, 0x10	; 16
    10bc:	80 83       	st	Z, r24
#if MS_SELECT == MASTER
	DIO_voidSetPinDir(GroupB,PIN4,Output); // make ss output
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	64 e0       	ldi	r22, 0x04	; 4
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(GroupB,PIN5,Output); //MOSI Master O/P
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	65 e0       	ldi	r22, 0x05	; 5
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(GroupB,PIN6,Input);  // MISO Master I/P
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	66 e0       	ldi	r22, 0x06	; 6
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(GroupB,PIN7,Output); //clock as Output
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(GroupB,PIN4,Input); // make ss Input
	DIO_voidSetPinDir(GroupB,PIN5,Input); //MOSI Slave Input
	DIO_voidSetPinDir(GroupB,PIN6,Output);  // MISO Slave Output
	DIO_voidSetPinDir(GroupB,PIN7,Input);   //clock as Input
#endif
	SPCR_REG ->CPOL = Clock_Polarity;//When this bit is written to one, SCK is high when idle. When CPOL is written to zero,
    10e6:	ed e2       	ldi	r30, 0x2D	; 45
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	87 7f       	andi	r24, 0xF7	; 247
    10ee:	80 83       	st	Z, r24
	SPCR_REG ->CPHA = Clock_PHASE   ;//data is sampled on the leading(first) or trailing (last) edge of SCK.
    10f0:	ed e2       	ldi	r30, 0x2D	; 45
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8b 7f       	andi	r24, 0xFB	; 251
    10f8:	80 83       	st	Z, r24
	/********************Oscillator Clock frequency fosc = fosc/8***************/
	SPCR_REG ->SPR0 = 0b01          ;
    10fa:	ed e2       	ldi	r30, 0x2D	; 45
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	80 83       	st	Z, r24
	SPCR_REG ->SPR1 = 0b0           ;
    1104:	ed e2       	ldi	r30, 0x2D	; 45
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8d 7f       	andi	r24, 0xFD	; 253
    110c:	80 83       	st	Z, r24
	SPSR_REG ->SPI2X= 0b01          ;
    110e:	ee e2       	ldi	r30, 0x2E	; 46
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	80 83       	st	Z, r24
	/******************************************************************/
	SPCR_REG ->SPE  = ENABLE        ; //SPI Enable
    1118:	ed e2       	ldi	r30, 0x2D	; 45
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	80 83       	st	Z, r24
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <SPI_u8SentReceive>:
u8 SPI_u8SentReceive(u8 copy_u8Data)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	89 83       	std	Y+1, r24	; 0x01
	SPDR_REG = copy_u8Data ;
    1134:	ef e2       	ldi	r30, 0x2F	; 47
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	80 83       	st	Z, r24
	while(SPSR_REG ->SPIF == 0);
    113c:	ee e2       	ldi	r30, 0x2E	; 46
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 78       	andi	r24, 0x80	; 128
    1144:	88 23       	and	r24, r24
    1146:	d1 f3       	breq	.-12     	; 0x113c <SPI_u8SentReceive+0x14>
	return SPDR_REG ;
    1148:	ef e2       	ldi	r30, 0x2F	; 47
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <SPI_u8SentReceiveAsynch>:
void SPI_u8SentReceiveAsynch(u8 copy_u8Data,u8*Receive,u8*Flag)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <SPI_u8SentReceiveAsynch+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <SPI_u8SentReceiveAsynch+0x8>
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	7b 83       	std	Y+3, r23	; 0x03
    1168:	6a 83       	std	Y+2, r22	; 0x02
    116a:	5d 83       	std	Y+5, r21	; 0x05
    116c:	4c 83       	std	Y+4, r20	; 0x04
	SPCR_REG ->SPIE = ENABLE       ; //Interrupt Enable
    116e:	ed e2       	ldi	r30, 0x2D	; 45
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	80 83       	st	Z, r24
	SPI_recieve = Receive;
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	90 93 8d 01 	sts	0x018D, r25
    1180:	80 93 8c 01 	sts	0x018C, r24
	*Flag = 0 ;
    1184:	ec 81       	ldd	r30, Y+4	; 0x04
    1186:	fd 81       	ldd	r31, Y+5	; 0x05
    1188:	10 82       	st	Z, r1
	SPI_recieveFalg=Flag;
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	90 93 8f 01 	sts	0x018F, r25
    1192:	80 93 8e 01 	sts	0x018E, r24
	SPDR_REG = copy_u8Data ;
    1196:	ef e2       	ldi	r30, 0x2F	; 47
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	80 83       	st	Z, r24
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    11ae:	1f 92       	push	r1
    11b0:	0f 92       	push	r0
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	8f 93       	push	r24
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	*SPI_recieve = SPDR_REG;
    11ca:	a0 91 8c 01 	lds	r26, 0x018C
    11ce:	b0 91 8d 01 	lds	r27, 0x018D
    11d2:	ef e2       	ldi	r30, 0x2F	; 47
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8c 93       	st	X, r24
	*SPI_recieveFalg = 1;
    11da:	e0 91 8e 01 	lds	r30, 0x018E
    11de:	f0 91 8f 01 	lds	r31, 0x018F
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	8f 91       	pop	r24
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <I2C_voidMasterInit>:
u8   I2C_u8ReadStatus(void);
void I2C_voidPrescalerValue(void);
u8 I2C_u8GetData(void);
/**********************************************MASTER***************************************************************/
void I2C_voidMasterInit(void)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    DIO_voidSetPinDir(GroupC,PIN0,Output);//Set SCL(CLK) pin as output
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	41 e0       	ldi	r20, 0x01	; 1
    120c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
    DIO_voidSetPinDir(GroupC,PIN1,Output);//Set SDA(DATA) pin as output
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>

	I2C_voidAckEnable();
    121a:	0e 94 19 0a 	call	0x1432	; 0x1432 <I2C_voidAckEnable>
	//I2C_voidInterruptEnable();
	I2C_voidPrescalerValue();
    121e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <I2C_voidPrescalerValue>
	I2C_voidSetMyAddress();//Set my address
    1222:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <I2C_voidSetMyAddress>
	I2C_voidTWE_Enable();
    1226:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_voidTWE_Enable>
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <I2C_voidStartCondEnable>:

TWI_ERROR_STATUS I2C_voidStartCondEnable(void)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState = 0;
    123a:	19 82       	std	Y+1, r1	; 0x01
	TWCR_REG ->TWSTA = ENABLE ;
    123c:	e6 e5       	ldi	r30, 0x56	; 86
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	80 83       	st	Z, r24
	I2C_voidClearFlag();       //Clear flag
    1246:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>
	while(I2C_u8GetFlag() != 1);// read Flag
    124a:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	e1 f7       	brne	.-8      	; 0x124a <I2C_voidStartCondEnable+0x1a>
	if(I2C_u8ReadStatus()!= START_COND_STATUS)//check status
    1252:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	19 f0       	breq	.+6      	; 0x1260 <I2C_voidStartCondEnable+0x30>
	{
		ErrorState=  START_ERROR;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <I2C_voidStartCondEnable+0x32>
	}
	else
	{
	ErrorState= NO_ERROR;
    1260:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState ;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
}
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <I2C_voidR_StartCondEnable>:
TWI_ERROR_STATUS I2C_voidR_StartCondEnable(void)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState = 0;
    1276:	19 82       	std	Y+1, r1	; 0x01
	TWCR_REG ->TWSTA = ENABLE ;
    1278:	e6 e5       	ldi	r30, 0x56	; 86
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	80 62       	ori	r24, 0x20	; 32
    1280:	80 83       	st	Z, r24
	I2C_voidClearFlag();       //Clear flag
    1282:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>
	while(I2C_u8GetFlag() != 1);// read Flag
    1286:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	e1 f7       	brne	.-8      	; 0x1286 <I2C_voidR_StartCondEnable+0x1a>
	if(I2C_u8ReadStatus()!= R_START_COND_STATUS)//check status
    128e:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    1292:	80 31       	cpi	r24, 0x10	; 16
    1294:	19 f0       	breq	.+6      	; 0x129c <I2C_voidR_StartCondEnable+0x30>
	{
		ErrorState=  START_ERROR;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	01 c0       	rjmp	.+2      	; 0x129e <I2C_voidR_StartCondEnable+0x32>
	}
	else
	{
	ErrorState= NO_ERROR;
    129c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState ;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <I2C_voidWriteSlaveAddress>:

TWI_ERROR_STATUS I2C_voidWriteSlaveAddress(u8 copy_u8Address)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <I2C_voidWriteSlaveAddress+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState =0;
    12b4:	19 82       	std	Y+1, r1	; 0x01
	TWDR_REG = (copy_u8Address << 1);//
    12b6:	e3 e2       	ldi	r30, 0x23	; 35
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 0f       	add	r24, r24
    12be:	80 83       	st	Z, r24
	TWDR_REG |= 0b0; //Write(0) or read(1)
    12c0:	a3 e2       	ldi	r26, 0x23	; 35
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e2       	ldi	r30, 0x23	; 35
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8c 93       	st	X, r24
	I2C_voidStartCondDisable();//Disable start condition
    12cc:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_voidStartCondDisable>
	I2C_voidClearFlag();//Clear flag
    12d0:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>

	while(I2C_u8GetFlag() != 1);// read Flag
    12d4:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <I2C_voidWriteSlaveAddress+0x2c>
	if(I2C_u8ReadStatus()!= SEND_ADDRESS_STATUS)//check status
    12dc:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    12e0:	88 31       	cpi	r24, 0x18	; 24
    12e2:	19 f0       	breq	.+6      	; 0x12ea <I2C_voidWriteSlaveAddress+0x42>
	{
		ErrorState=  SLAVE_ADDRESS_WRITE_ERROR;
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <I2C_voidWriteSlaveAddress+0x44>
	}
	else
	{
		ErrorState = NO_ERROR;
    12ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <I2C_voidReadSlaveAddress>:
TWI_ERROR_STATUS I2C_voidReadSlaveAddress(u8 copy_u8Address)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <I2C_voidReadSlaveAddress+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState =0;
    1304:	19 82       	std	Y+1, r1	; 0x01
	TWDR_REG = (copy_u8Address << 1);//
    1306:	e3 e2       	ldi	r30, 0x23	; 35
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	88 0f       	add	r24, r24
    130e:	80 83       	st	Z, r24
	TWDR_REG |= 0b1; //Write(0) or read(1)
    1310:	a3 e2       	ldi	r26, 0x23	; 35
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e3 e2       	ldi	r30, 0x23	; 35
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	8c 93       	st	X, r24
	I2C_voidStartCondDisable();//Disable start condition
    131e:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_voidStartCondDisable>
	I2C_voidClearFlag();//Clear flag
    1322:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>

	while(I2C_u8GetFlag() != 1);// read Flag
    1326:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	e1 f7       	brne	.-8      	; 0x1326 <I2C_voidReadSlaveAddress+0x2e>
	if(I2C_u8ReadStatus()!= READ_ADDRESS_STATUS)//check status
    132e:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    1332:	80 34       	cpi	r24, 0x40	; 64
    1334:	19 f0       	breq	.+6      	; 0x133c <I2C_voidReadSlaveAddress+0x44>
	{
		ErrorState=  SLAVE_ADDRESS_WRITE_ERROR;
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	01 c0       	rjmp	.+2      	; 0x133e <I2C_voidReadSlaveAddress+0x46>
	}
	else
	{
		ErrorState = NO_ERROR;
    133c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <I2C_voidMasterSendData>:
TWI_ERROR_STATUS I2C_voidMasterSendData(u8 copy_u8Data)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	00 d0       	rcall	.+0      	; 0x1350 <I2C_voidMasterSendData+0x6>
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState =0;
    1356:	19 82       	std	Y+1, r1	; 0x01
	TWDR_REG = copy_u8Data;
    1358:	e3 e2       	ldi	r30, 0x23	; 35
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	80 83       	st	Z, r24
	I2C_voidClearFlag();//Clear flag
    1360:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>

	while(I2C_u8GetFlag() != 1);// read Flag
    1364:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	e1 f7       	brne	.-8      	; 0x1364 <I2C_voidMasterSendData+0x1a>
	if(I2C_u8ReadStatus()!= SEND_DATA_STATUS)//check status
    136c:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    1370:	88 32       	cpi	r24, 0x28	; 40
    1372:	19 f0       	breq	.+6      	; 0x137a <I2C_voidMasterSendData+0x30>
	{
		ErrorState=  SEND_BYTE_ERROR;
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	01 c0       	rjmp	.+2      	; 0x137c <I2C_voidMasterSendData+0x32>
	}
	else
	{
		ErrorState = NO_ERROR;
    137a:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <I2C_u8MasterReceiveData>:

TWI_ERROR_STATUS I2C_u8MasterReceiveData(u8 * copy_u8Data)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <I2C_u8MasterReceiveData+0x6>
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	9b 83       	std	Y+3, r25	; 0x03
    1396:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState = 0;
    1398:	19 82       	std	Y+1, r1	; 0x01
	I2C_voidClearFlag();//Clear flag
    139a:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>
	while(I2C_u8GetFlag() != 1);// read Flag
    139e:	0e 94 31 0a 	call	0x1462	; 0x1462 <I2C_u8GetFlag>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	e1 f7       	brne	.-8      	; 0x139e <I2C_u8MasterReceiveData+0x16>
	if(I2C_u8ReadStatus()!= READ_DATA_STATUS)//check status
    13a6:	0e 94 3e 0a 	call	0x147c	; 0x147c <I2C_u8ReadStatus>
    13aa:	80 35       	cpi	r24, 0x50	; 80
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <I2C_u8MasterReceiveData+0x2c>
	{
		ErrorState=  READ_BYTE_ERROR;
    13ae:	86 e0       	ldi	r24, 0x06	; 6
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <I2C_u8MasterReceiveData+0x38>
	}
	else
	{
		*copy_u8Data = I2C_u8GetData();//Get data
    13b4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <I2C_u8GetData>
    13b8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ba:	fb 81       	ldd	r31, Y+3	; 0x03
    13bc:	80 83       	st	Z, r24
		ErrorState= NO_ERROR;
    13be:	19 82       	std	Y+1, r1	; 0x01
	}
return ErrorState ;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <I2C_voidStopCond>:
void I2C_voidStopCond(void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWSTO = ENABLE ;
    13d6:	e6 e5       	ldi	r30, 0x56	; 86
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	80 61       	ori	r24, 0x10	; 16
    13de:	80 83       	st	Z, r24
	I2C_voidClearFlag();//Clear flag
    13e0:	0e 94 25 0a 	call	0x144a	; 0x144a <I2C_voidClearFlag>
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <I2C_voidInterruptEnable>:



/*********************************************************************************************************************/
void I2C_voidInterruptEnable(void)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWIE =  ENABLE ;
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	81 60       	ori	r24, 0x01	; 1
    13fa:	80 83       	st	Z, r24
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <I2C_voidTWE_Enable>:
void I2C_voidTWE_Enable(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWEN =  ENABLE ;
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	80 83       	st	Z, r24
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <I2C_voidStartCondDisable>:

void I2C_voidStartCondDisable(void)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWSTA = DISABLE ;
    1422:	e6 e5       	ldi	r30, 0x56	; 86
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	80 83       	st	Z, r24
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <I2C_voidAckEnable>:
void I2C_voidAckEnable(void)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWEA  = ENABLE;
    143a:	e6 e5       	ldi	r30, 0x56	; 86
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	80 64       	ori	r24, 0x40	; 64
    1442:	80 83       	st	Z, r24
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <I2C_voidClearFlag>:
void I2C_voidClearFlag(void)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG ->TWINT = ENABLE;
    1452:	e6 e5       	ldi	r30, 0x56	; 86
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	80 68       	ori	r24, 0x80	; 128
    145a:	80 83       	st	Z, r24
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <I2C_u8GetFlag>:
u8 I2C_u8GetFlag(void)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
	return TWCR_REG ->TWINT ;
    146a:	e6 e5       	ldi	r30, 0x56	; 86
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	88 1f       	adc	r24, r24
    1472:	88 27       	eor	r24, r24
    1474:	88 1f       	adc	r24, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <I2C_u8ReadStatus>:
u8   I2C_u8ReadStatus(void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	u8 status = TWSR_REG ->TWS ;
    1486:	e1 e2       	ldi	r30, 0x21	; 33
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	86 95       	lsr	r24
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	89 83       	std	Y+1, r24	; 0x01
	status &= 0b11111000 ;//mask
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	89 83       	std	Y+1, r24	; 0x01
	return status ;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <I2C_voidPrescalerValue>:
void I2C_voidPrescalerValue(void)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
	TWSR_REG ->TWPS = Prescaler_Value;
    14ac:	e1 e2       	ldi	r30, 0x21	; 33
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8c 7f       	andi	r24, 0xFC	; 252
    14b4:	80 83       	st	Z, r24
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <I2C_voidSetMyAddress>:


void I2C_voidSetMyAddress(void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	TWAR_REG->TWA = MY_ADDRESS ;
    14c4:	e2 e2       	ldi	r30, 0x22	; 34
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	8a 62       	ori	r24, 0x2A	; 42
    14ce:	80 83       	st	Z, r24
	TWAR_REG->TWGCE= GENERAL_MODE;     // General Mode Enable
    14d0:	e2 e2       	ldi	r30, 0x22	; 34
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8e 7f       	andi	r24, 0xFE	; 254
    14d8:	80 83       	st	Z, r24
}
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <I2C_u8GetData>:
u8 I2C_u8GetData(void)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	return TWDR_REG ;
    14e8:	e3 e2       	ldi	r30, 0x23	; 35
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GIE_voidEnable>:
#include "GIE_register.h"



void GIE_voidEnable(void)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	set_Bit(GIE_SREG,GIE_SREG_PIN);
    14fc:	af e5       	ldi	r26, 0x5F	; 95
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ef e5       	ldi	r30, 0x5F	; 95
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 68       	ori	r24, 0x80	; 128
    1508:	8c 93       	st	X, r24
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	clr_Bit(GIE_SREG,GIE_SREG_PIN);
    1518:	af e5       	ldi	r26, 0x5F	; 95
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ef e5       	ldi	r30, 0x5F	; 95
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 77       	andi	r24, 0x7F	; 127
    1524:	8c 93       	st	X, r24
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <EXTI1_voidInit>:
#include "EXTI_private.h"

void (*CallBackFunc[3])(void)=  {NULL_PTR,NULL_PTR,NULL_PTR};

void EXTI1_voidInit(void)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GroupD,PIN3,Input);
    1534:	84 e0       	ldi	r24, 0x04	; 4
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(GroupD,PIN3,High);
    153e:	84 e0       	ldi	r24, 0x04	; 4
    1540:	63 e0       	ldi	r22, 0x03	; 3
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
#elif INTRRUPT1_SENSE == ANY_CHANGE
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);

#elif INTRRUPT1_SENSE == RISING_EDGE
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
    1548:	a5 e5       	ldi	r26, 0x55	; 85
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e5       	ldi	r30, 0x55	; 85
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	88 60       	ori	r24, 0x08	; 8
    1554:	8c 93       	st	X, r24
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);
    1556:	a5 e5       	ldi	r26, 0x55	; 85
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e5       	ldi	r30, 0x55	; 85
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	84 60       	ori	r24, 0x04	; 4
    1562:	8c 93       	st	X, r24
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);

#endif

	set_Bit(EXTI_GICR,EXTI_GICR_INT1);
    1564:	ab e5       	ldi	r26, 0x5B	; 91
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e5       	ldi	r30, 0x5B	; 91
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 68       	ori	r24, 0x80	; 128
    1570:	8c 93       	st	X, r24
}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <EXTI1_voidDisable>:
void EXTI1_voidDisable(void)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
	clr_Bit(EXTI_GICR,EXTI_GICR_INT1);
    1580:	ab e5       	ldi	r26, 0x5B	; 91
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e5       	ldi	r30, 0x5B	; 91
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	8f 77       	andi	r24, 0x7F	; 127
    158c:	8c 93       	st	X, r24
}
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <EXTI1_voiEnable>:
void EXTI1_voiEnable(u8 INTRRUPT_SENSE)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDir(GroupD,PIN3,Input);
    15a0:	84 e0       	ldi	r24, 0x04	; 4
    15a2:	63 e0       	ldi	r22, 0x03	; 3
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(GroupD,PIN3,High);
    15aa:	84 e0       	ldi	r24, 0x04	; 4
    15ac:	63 e0       	ldi	r22, 0x03	; 3
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

if( INTRRUPT_SENSE == FALLING_EDGE)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	79 f4       	brne	.+30     	; 0x15d8 <EXTI1_voiEnable+0x44>
{
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);
    15ba:	a5 e5       	ldi	r26, 0x55	; 85
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e5       	ldi	r30, 0x55	; 85
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8b 7f       	andi	r24, 0xFB	; 251
    15c6:	8c 93       	st	X, r24
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
    15c8:	a5 e5       	ldi	r26, 0x55	; 85
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e5       	ldi	r30, 0x55	; 85
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8c 93       	st	X, r24
    15d6:	35 c0       	rjmp	.+106    	; 0x1642 <EXTI1_voiEnable+0xae>
}
else if (INTRRUPT_SENSE == ANY_CHANGE)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	88 23       	and	r24, r24
    15dc:	79 f4       	brne	.+30     	; 0x15fc <EXTI1_voiEnable+0x68>
{
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
    15de:	a5 e5       	ldi	r26, 0x55	; 85
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e5       	ldi	r30, 0x55	; 85
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	87 7f       	andi	r24, 0xF7	; 247
    15ea:	8c 93       	st	X, r24
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);
    15ec:	a5 e5       	ldi	r26, 0x55	; 85
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e5       	ldi	r30, 0x55	; 85
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	84 60       	ori	r24, 0x04	; 4
    15f8:	8c 93       	st	X, r24
    15fa:	23 c0       	rjmp	.+70     	; 0x1642 <EXTI1_voiEnable+0xae>
}
else if( INTRRUPT_SENSE == RISING_EDGE)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	79 f4       	brne	.+30     	; 0x1620 <EXTI1_voiEnable+0x8c>
{
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
    1602:	a5 e5       	ldi	r26, 0x55	; 85
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e5       	ldi	r30, 0x55	; 85
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	8c 93       	st	X, r24
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	8c 93       	st	X, r24
    161e:	11 c0       	rjmp	.+34     	; 0x1642 <EXTI1_voiEnable+0xae>
}
else if( INTRRUPT_SENSE == LOW_LEVEL)
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	71 f4       	brne	.+28     	; 0x1642 <EXTI1_voiEnable+0xae>
{
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC11);
    1626:	a5 e5       	ldi	r26, 0x55	; 85
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e5       	ldi	r30, 0x55	; 85
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	87 7f       	andi	r24, 0xF7	; 247
    1632:	8c 93       	st	X, r24
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);
    1634:	a5 e5       	ldi	r26, 0x55	; 85
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e5       	ldi	r30, 0x55	; 85
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8b 7f       	andi	r24, 0xFB	; 251
    1640:	8c 93       	st	X, r24
}

	set_Bit(EXTI_GICR,EXTI_GICR_INT1);
    1642:	ab e5       	ldi	r26, 0x5B	; 91
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e5       	ldi	r30, 0x5B	; 91
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	8c 93       	st	X, r24
}
    1650:	0f 90       	pop	r0
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <EXTI0_voidInit>:
void EXTI0_voidInit(void)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GroupD,PIN2,Input);
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	62 e0       	ldi	r22, 0x02	; 2
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(GroupD,PIN2,High);
    166a:	84 e0       	ldi	r24, 0x04	; 4
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
#elif INTRRUPT0_SENSE == ANY_CHANGE
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC01);
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC00);

#elif INTRRUPT0_SENSE == RISING_EDGE
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC00);
    1674:	a5 e5       	ldi	r26, 0x55	; 85
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e5       	ldi	r30, 0x55	; 85
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	81 60       	ori	r24, 0x01	; 1
    1680:	8c 93       	st	X, r24
	set_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC01);
    1682:	a5 e5       	ldi	r26, 0x55	; 85
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e5       	ldi	r30, 0x55	; 85
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	8c 93       	st	X, r24
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC00);
	clr_Bit(EXTI_MCUCR,EXTI_MCUSR_ISC10);

#endif

	set_Bit(EXTI_GICR,EXTI_GICR_INT0);
    1690:	ab e5       	ldi	r26, 0x5B	; 91
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	eb e5       	ldi	r30, 0x5B	; 91
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 64       	ori	r24, 0x40	; 64
    169c:	8c 93       	st	X, r24
}
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <EXTI2_voidInit>:

void EXTI2_voidInit(void)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GroupB,PIN2,Input);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(GroupB,PIN2,High);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

#if INTRRUPT2_SENSE == FALLING_EDGE
clr_Bit(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);
    16c0:	a4 e5       	ldi	r26, 0x54	; 84
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e5       	ldi	r30, 0x54	; 84
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7b       	andi	r24, 0xBF	; 191
    16cc:	8c 93       	st	X, r24
#elif INTRRUPT2_SENSE == RISING_EDGE
set_Bit(EXTI_MCUCSR,EXTI_MCUCSR_ISC2);

#endif

	set_Bit(EXTI_GICR,EXTI_GICR_INT2);
    16ce:	ab e5       	ldi	r26, 0x5B	; 91
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e5       	ldi	r30, 0x5B	; 91
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	80 62       	ori	r24, 0x20	; 32
    16da:	8c 93       	st	X, r24
}
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <EXTI0_voidSetCallBack>:
void EXTI0_voidSetCallBack(void (*copy_PtrToFUN)(void))
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <EXTI0_voidSetCallBack+0x6>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
  CallBackFunc[0] = copy_PtrToFUN;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	90 93 91 01 	sts	0x0191, r25
    16f8:	80 93 90 01 	sts	0x0190, r24
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <EXTI1_voidSetCallBack>:
void EXTI1_voidSetCallBack(void (*copy_PtrToFUN)(void))
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <EXTI1_voidSetCallBack+0x6>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
	  CallBackFunc[1] = copy_PtrToFUN;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	90 93 93 01 	sts	0x0193, r25
    171c:	80 93 92 01 	sts	0x0192, r24
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <EXTI2_voidSetCallBack>:
void EXTI2_voidSetCallBack(void (*copy_PtrToFUN)(void))
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <EXTI2_voidSetCallBack+0x6>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
	  CallBackFunc[2] = copy_PtrToFUN;
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	90 93 95 01 	sts	0x0195, r25
    1740:	80 93 94 01 	sts	0x0194, r24
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    174e:	1f 92       	push	r1
    1750:	0f 92       	push	r0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	CallBackFunc[0]();
    1778:	e0 91 90 01 	lds	r30, 0x0190
    177c:	f0 91 91 01 	lds	r31, 0x0191
    1780:	09 95       	icall
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_2>:
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	2f 93       	push	r18
    17b4:	3f 93       	push	r19
    17b6:	4f 93       	push	r20
    17b8:	5f 93       	push	r21
    17ba:	6f 93       	push	r22
    17bc:	7f 93       	push	r23
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	af 93       	push	r26
    17c4:	bf 93       	push	r27
    17c6:	ef 93       	push	r30
    17c8:	ff 93       	push	r31
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
	CallBackFunc[1]();
    17d2:	e0 91 92 01 	lds	r30, 0x0192
    17d6:	f0 91 93 01 	lds	r31, 0x0193
    17da:	09 95       	icall
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	bf 91       	pop	r27
    17e6:	af 91       	pop	r26
    17e8:	9f 91       	pop	r25
    17ea:	8f 91       	pop	r24
    17ec:	7f 91       	pop	r23
    17ee:	6f 91       	pop	r22
    17f0:	5f 91       	pop	r21
    17f2:	4f 91       	pop	r20
    17f4:	3f 91       	pop	r19
    17f6:	2f 91       	pop	r18
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	CallBackFunc[2]();
    182c:	e0 91 94 01 	lds	r30, 0x0194
    1830:	f0 91 95 01 	lds	r31, 0x0195
    1834:	09 95       	icall
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <DIO_voidSetPinDir>:
#include "DIO_interface.h"
#include "DIO_Private.h"


void DIO_voidSetPinDir(u8 copy_u8Reg,u8 pinNum,u8 pin_dir)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	27 97       	sbiw	r28, 0x07	; 7
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	6a 83       	std	Y+2, r22	; 0x02
    1874:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_dir == Output)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	09 f0       	breq	.+2      	; 0x187e <DIO_voidSetPinDir+0x22>
    187c:	70 c0       	rjmp	.+224    	; 0x195e <DIO_voidSetPinDir+0x102>
	{
	switch(copy_u8Reg)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3f 83       	std	Y+7, r19	; 0x07
    1886:	2e 83       	std	Y+6, r18	; 0x06
    1888:	8e 81       	ldd	r24, Y+6	; 0x06
    188a:	9f 81       	ldd	r25, Y+7	; 0x07
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	91 05       	cpc	r25, r1
    1890:	51 f1       	breq	.+84     	; 0x18e6 <DIO_voidSetPinDir+0x8a>
    1892:	2e 81       	ldd	r18, Y+6	; 0x06
    1894:	3f 81       	ldd	r19, Y+7	; 0x07
    1896:	23 30       	cpi	r18, 0x03	; 3
    1898:	31 05       	cpc	r19, r1
    189a:	34 f4       	brge	.+12     	; 0x18a8 <DIO_voidSetPinDir+0x4c>
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	9f 81       	ldd	r25, Y+7	; 0x07
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	61 f0       	breq	.+24     	; 0x18be <DIO_voidSetPinDir+0x62>
    18a6:	d3 c0       	rjmp	.+422    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
    18a8:	2e 81       	ldd	r18, Y+6	; 0x06
    18aa:	3f 81       	ldd	r19, Y+7	; 0x07
    18ac:	23 30       	cpi	r18, 0x03	; 3
    18ae:	31 05       	cpc	r19, r1
    18b0:	71 f1       	breq	.+92     	; 0x190e <DIO_voidSetPinDir+0xb2>
    18b2:	8e 81       	ldd	r24, Y+6	; 0x06
    18b4:	9f 81       	ldd	r25, Y+7	; 0x07
    18b6:	84 30       	cpi	r24, 0x04	; 4
    18b8:	91 05       	cpc	r25, r1
    18ba:	e9 f1       	breq	.+122    	; 0x1936 <DIO_voidSetPinDir+0xda>
    18bc:	c8 c0       	rjmp	.+400    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
	{
		case GroupA : set_Bit(DDRA,pinNum); break;
    18be:	aa e3       	ldi	r26, 0x3A	; 58
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ea e3       	ldi	r30, 0x3A	; 58
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_voidSetPinDir+0x80>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_voidSetPinDir+0x7c>
    18e0:	84 2b       	or	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	b4 c0       	rjmp	.+360    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupB : set_Bit(DDRB,pinNum); break;
    18e6:	a7 e3       	ldi	r26, 0x37	; 55
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e7 e3       	ldi	r30, 0x37	; 55
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_voidSetPinDir+0xa8>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_voidSetPinDir+0xa4>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	a0 c0       	rjmp	.+320    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupC : set_Bit(DDRC,pinNum); break;
    190e:	a4 e3       	ldi	r26, 0x34	; 52
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e4 e3       	ldi	r30, 0x34	; 52
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_voidSetPinDir+0xd0>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_voidSetPinDir+0xcc>
    1930:	84 2b       	or	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	8c c0       	rjmp	.+280    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupD : set_Bit(DDRD,pinNum); break;
    1936:	a1 e3       	ldi	r26, 0x31	; 49
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e1 e3       	ldi	r30, 0x31	; 49
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_voidSetPinDir+0xf8>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_voidSetPinDir+0xf4>
    1958:	84 2b       	or	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	78 c0       	rjmp	.+240    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
	}
	}
	else if(pin_dir == Input)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 23       	and	r24, r24
    1962:	09 f0       	breq	.+2      	; 0x1966 <DIO_voidSetPinDir+0x10a>
    1964:	74 c0       	rjmp	.+232    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
	{
		switch(copy_u8Reg)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3d 83       	std	Y+5, r19	; 0x05
    196e:	2c 83       	std	Y+4, r18	; 0x04
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	91 05       	cpc	r25, r1
    1978:	61 f1       	breq	.+88     	; 0x19d2 <DIO_voidSetPinDir+0x176>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	23 30       	cpi	r18, 0x03	; 3
    1980:	31 05       	cpc	r19, r1
    1982:	34 f4       	brge	.+12     	; 0x1990 <DIO_voidSetPinDir+0x134>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	69 f0       	breq	.+26     	; 0x19a8 <DIO_voidSetPinDir+0x14c>
    198e:	5f c0       	rjmp	.+190    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	23 30       	cpi	r18, 0x03	; 3
    1996:	31 05       	cpc	r19, r1
    1998:	89 f1       	breq	.+98     	; 0x19fc <DIO_voidSetPinDir+0x1a0>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_voidSetPinDir+0x14a>
    19a4:	40 c0       	rjmp	.+128    	; 0x1a26 <DIO_voidSetPinDir+0x1ca>
    19a6:	53 c0       	rjmp	.+166    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
	{
		case GroupA : clr_Bit(DDRA,pinNum); break;
    19a8:	aa e3       	ldi	r26, 0x3A	; 58
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_voidSetPinDir+0x16a>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_voidSetPinDir+0x166>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	3e c0       	rjmp	.+124    	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupB : clr_Bit(DDRB,pinNum); break;
    19d2:	a7 e3       	ldi	r26, 0x37	; 55
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e3       	ldi	r30, 0x37	; 55
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_voidSetPinDir+0x194>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_voidSetPinDir+0x190>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	29 c0       	rjmp	.+82     	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupC : clr_Bit(DDRC,pinNum); break;
    19fc:	a4 e3       	ldi	r26, 0x34	; 52
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e4 e3       	ldi	r30, 0x34	; 52
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_voidSetPinDir+0x1be>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_voidSetPinDir+0x1ba>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <DIO_voidSetPinDir+0x1f2>
		case GroupD : clr_Bit(DDRD,pinNum); break;
    1a26:	a1 e3       	ldi	r26, 0x31	; 49
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e1 e3       	ldi	r30, 0x31	; 49
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <DIO_voidSetPinDir+0x1e8>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <DIO_voidSetPinDir+0x1e4>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
	}
}
}
    1a4e:	27 96       	adiw	r28, 0x07	; 7
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 copy_u8Reg,u8 pinNum,u8 pin_value)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	27 97       	sbiw	r28, 0x07	; 7
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	6a 83       	std	Y+2, r22	; 0x02
    1a78:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_value == High)
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <DIO_voidSetPinValue+0x22>
    1a80:	70 c0       	rjmp	.+224    	; 0x1b62 <DIO_voidSetPinValue+0x102>
		{
		switch(copy_u8Reg)
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	3f 83       	std	Y+7, r19	; 0x07
    1a8a:	2e 83       	std	Y+6, r18	; 0x06
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	91 05       	cpc	r25, r1
    1a94:	51 f1       	breq	.+84     	; 0x1aea <DIO_voidSetPinValue+0x8a>
    1a96:	2e 81       	ldd	r18, Y+6	; 0x06
    1a98:	3f 81       	ldd	r19, Y+7	; 0x07
    1a9a:	23 30       	cpi	r18, 0x03	; 3
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	34 f4       	brge	.+12     	; 0x1aac <DIO_voidSetPinValue+0x4c>
    1aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	61 f0       	breq	.+24     	; 0x1ac2 <DIO_voidSetPinValue+0x62>
    1aaa:	d3 c0       	rjmp	.+422    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
    1aac:	2e 81       	ldd	r18, Y+6	; 0x06
    1aae:	3f 81       	ldd	r19, Y+7	; 0x07
    1ab0:	23 30       	cpi	r18, 0x03	; 3
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	71 f1       	breq	.+92     	; 0x1b12 <DIO_voidSetPinValue+0xb2>
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	91 05       	cpc	r25, r1
    1abe:	e9 f1       	breq	.+122    	; 0x1b3a <DIO_voidSetPinValue+0xda>
    1ac0:	c8 c0       	rjmp	.+400    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
		{
			case GroupA : set_Bit(PORTA,pinNum); break;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_voidSetPinValue+0x80>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_voidSetPinValue+0x7c>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	b4 c0       	rjmp	.+360    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupB : set_Bit(PORTB,pinNum); break;
    1aea:	a8 e3       	ldi	r26, 0x38	; 56
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e8 e3       	ldi	r30, 0x38	; 56
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_voidSetPinValue+0xa8>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_voidSetPinValue+0xa4>
    1b0c:	84 2b       	or	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	a0 c0       	rjmp	.+320    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupC : set_Bit(PORTC,pinNum); break;
    1b12:	a5 e3       	ldi	r26, 0x35	; 53
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_voidSetPinValue+0xd0>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_voidSetPinValue+0xcc>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	8c c0       	rjmp	.+280    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupD : set_Bit(PORTD,pinNum); break;
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_voidSetPinValue+0xf8>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_voidSetPinValue+0xf4>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	78 c0       	rjmp	.+240    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
		}
		}
		else if(pin_value == Low)
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	88 23       	and	r24, r24
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <DIO_voidSetPinValue+0x10a>
    1b68:	74 c0       	rjmp	.+232    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
		{
			switch(copy_u8Reg)
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3d 83       	std	Y+5, r19	; 0x05
    1b72:	2c 83       	std	Y+4, r18	; 0x04
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	61 f1       	breq	.+88     	; 0x1bd6 <DIO_voidSetPinValue+0x176>
    1b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b80:	3d 81       	ldd	r19, Y+5	; 0x05
    1b82:	23 30       	cpi	r18, 0x03	; 3
    1b84:	31 05       	cpc	r19, r1
    1b86:	34 f4       	brge	.+12     	; 0x1b94 <DIO_voidSetPinValue+0x134>
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	91 05       	cpc	r25, r1
    1b90:	69 f0       	breq	.+26     	; 0x1bac <DIO_voidSetPinValue+0x14c>
    1b92:	5f c0       	rjmp	.+190    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
    1b94:	2c 81       	ldd	r18, Y+4	; 0x04
    1b96:	3d 81       	ldd	r19, Y+5	; 0x05
    1b98:	23 30       	cpi	r18, 0x03	; 3
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	89 f1       	breq	.+98     	; 0x1c00 <DIO_voidSetPinValue+0x1a0>
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	91 05       	cpc	r25, r1
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <DIO_voidSetPinValue+0x14a>
    1ba8:	40 c0       	rjmp	.+128    	; 0x1c2a <DIO_voidSetPinValue+0x1ca>
    1baa:	53 c0       	rjmp	.+166    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
		{
			case GroupA : clr_Bit(PORTA,pinNum); break;
    1bac:	ab e3       	ldi	r26, 0x3B	; 59
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <DIO_voidSetPinValue+0x16a>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <DIO_voidSetPinValue+0x166>
    1bce:	80 95       	com	r24
    1bd0:	84 23       	and	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	3e c0       	rjmp	.+124    	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupB : clr_Bit(PORTB,pinNum); break;
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_voidSetPinValue+0x194>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_voidSetPinValue+0x190>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	29 c0       	rjmp	.+82     	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupC : clr_Bit(PORTC,pinNum); break;
    1c00:	a5 e3       	ldi	r26, 0x35	; 53
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e5 e3       	ldi	r30, 0x35	; 53
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_voidSetPinValue+0x1be>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_voidSetPinValue+0x1ba>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <DIO_voidSetPinValue+0x1f2>
			case GroupD : clr_Bit(PORTD,pinNum); break;
    1c2a:	a2 e3       	ldi	r26, 0x32	; 50
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e2 e3       	ldi	r30, 0x32	; 50
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_voidSetPinValue+0x1e8>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_voidSetPinValue+0x1e4>
    1c4c:	80 95       	com	r24
    1c4e:	84 23       	and	r24, r20
    1c50:	8c 93       	st	X, r24
		}
	}
}
    1c52:	27 96       	adiw	r28, 0x07	; 7
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8Reg,u8 pinNum)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <DIO_u8GetPinValue+0x6>
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <DIO_u8GetPinValue+0x8>
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	8a 83       	std	Y+2, r24	; 0x02
    1c74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value = -1;
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Reg)
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	3d 83       	std	Y+5, r19	; 0x05
    1c82:	2c 83       	std	Y+4, r18	; 0x04
    1c84:	4c 81       	ldd	r20, Y+4	; 0x04
    1c86:	5d 81       	ldd	r21, Y+5	; 0x05
    1c88:	42 30       	cpi	r20, 0x02	; 2
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	41 f1       	breq	.+80     	; 0x1cde <DIO_u8GetPinValue+0x7a>
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	9d 81       	ldd	r25, Y+5	; 0x05
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	34 f4       	brge	.+12     	; 0x1ca4 <DIO_u8GetPinValue+0x40>
    1c98:	2c 81       	ldd	r18, Y+4	; 0x04
    1c9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9c:	21 30       	cpi	r18, 0x01	; 1
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <DIO_u8GetPinValue+0x56>
    1ca2:	52 c0       	rjmp	.+164    	; 0x1d48 <DIO_u8GetPinValue+0xe4>
    1ca4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ca6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ca8:	43 30       	cpi	r20, 0x03	; 3
    1caa:	51 05       	cpc	r21, r1
    1cac:	51 f1       	breq	.+84     	; 0x1d02 <DIO_u8GetPinValue+0x9e>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	84 30       	cpi	r24, 0x04	; 4
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	b9 f1       	breq	.+110    	; 0x1d26 <DIO_u8GetPinValue+0xc2>
    1cb8:	47 c0       	rjmp	.+142    	; 0x1d48 <DIO_u8GetPinValue+0xe4>
	{
	case GroupA:Local_u8Value = get_Bit(PINA,pinNum); break;
    1cba:	e9 e3       	ldi	r30, 0x39	; 57
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a9 01       	movw	r20, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <DIO_u8GetPinValue+0x6e>
    1cce:	55 95       	asr	r21
    1cd0:	47 95       	ror	r20
    1cd2:	8a 95       	dec	r24
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <DIO_u8GetPinValue+0x6a>
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	35 c0       	rjmp	.+106    	; 0x1d48 <DIO_u8GetPinValue+0xe4>
	case GroupB:Local_u8Value = get_Bit(PINB,pinNum); break;
    1cde:	e6 e3       	ldi	r30, 0x36	; 54
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a9 01       	movw	r20, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_u8GetPinValue+0x92>
    1cf2:	55 95       	asr	r21
    1cf4:	47 95       	ror	r20
    1cf6:	8a 95       	dec	r24
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <DIO_u8GetPinValue+0x8e>
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	23 c0       	rjmp	.+70     	; 0x1d48 <DIO_u8GetPinValue+0xe4>
	case GroupC:Local_u8Value = get_Bit(PINC,pinNum); break;
    1d02:	e3 e3       	ldi	r30, 0x33	; 51
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a9 01       	movw	r20, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <DIO_u8GetPinValue+0xb6>
    1d16:	55 95       	asr	r21
    1d18:	47 95       	ror	r20
    1d1a:	8a 95       	dec	r24
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <DIO_u8GetPinValue+0xb2>
    1d1e:	ca 01       	movw	r24, r20
    1d20:	81 70       	andi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	11 c0       	rjmp	.+34     	; 0x1d48 <DIO_u8GetPinValue+0xe4>
	case GroupD:Local_u8Value = get_Bit(PIND,pinNum); break;
    1d26:	e0 e3       	ldi	r30, 0x30	; 48
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_u8GetPinValue+0xda>
    1d3a:	55 95       	asr	r21
    1d3c:	47 95       	ror	r20
    1d3e:	8a 95       	dec	r24
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_u8GetPinValue+0xd6>
    1d42:	ca 01       	movw	r24, r20
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8Value;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <DIO_voidTogPinValue>:

void DIO_voidTogPinValue(u8 copy_u8Reg,u8 pinNum)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <DIO_voidTogPinValue+0x6>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <DIO_voidTogPinValue+0x8>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Reg)
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	3c 83       	std	Y+4, r19	; 0x04
    1d72:	2b 83       	std	Y+3, r18	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	82 30       	cpi	r24, 0x02	; 2
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	51 f1       	breq	.+84     	; 0x1dd2 <DIO_voidTogPinValue+0x78>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	23 30       	cpi	r18, 0x03	; 3
    1d84:	31 05       	cpc	r19, r1
    1d86:	34 f4       	brge	.+12     	; 0x1d94 <DIO_voidTogPinValue+0x3a>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	61 f0       	breq	.+24     	; 0x1daa <DIO_voidTogPinValue+0x50>
    1d92:	5a c0       	rjmp	.+180    	; 0x1e48 <DIO_voidTogPinValue+0xee>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	23 30       	cpi	r18, 0x03	; 3
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	71 f1       	breq	.+92     	; 0x1dfa <DIO_voidTogPinValue+0xa0>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	91 05       	cpc	r25, r1
    1da6:	e9 f1       	breq	.+122    	; 0x1e22 <DIO_voidTogPinValue+0xc8>
    1da8:	4f c0       	rjmp	.+158    	; 0x1e48 <DIO_voidTogPinValue+0xee>
	{
	case GroupA: tog_Bit(PORTA,pinNum); break;
    1daa:	ab e3       	ldi	r26, 0x3B	; 59
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb e3       	ldi	r30, 0x3B	; 59
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_voidTogPinValue+0x6e>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_voidTogPinValue+0x6a>
    1dcc:	84 27       	eor	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	3b c0       	rjmp	.+118    	; 0x1e48 <DIO_voidTogPinValue+0xee>
	case GroupB: tog_Bit(PORTB,pinNum); break;
    1dd2:	a8 e3       	ldi	r26, 0x38	; 56
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e8 e3       	ldi	r30, 0x38	; 56
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_voidTogPinValue+0x96>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_voidTogPinValue+0x92>
    1df4:	84 27       	eor	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	27 c0       	rjmp	.+78     	; 0x1e48 <DIO_voidTogPinValue+0xee>
	case GroupC: tog_Bit(PORTC,pinNum); break;
    1dfa:	a5 e3       	ldi	r26, 0x35	; 53
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e3       	ldi	r30, 0x35	; 53
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_voidTogPinValue+0xbe>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_voidTogPinValue+0xba>
    1e1c:	84 27       	eor	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	13 c0       	rjmp	.+38     	; 0x1e48 <DIO_voidTogPinValue+0xee>
	case GroupD: tog_Bit(PORTD,pinNum); break;
    1e22:	a2 e3       	ldi	r26, 0x32	; 50
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e2 e3       	ldi	r30, 0x32	; 50
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_voidTogPinValue+0xe6>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_voidTogPinValue+0xe2>
    1e44:	84 27       	eor	r24, r20
    1e46:	8c 93       	st	X, r24
}
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 copy_u8Reg,u8 PortDir)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <DIO_voidSetPortDir+0x6>
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_voidSetPortDir+0x8>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Reg)
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3c 83       	std	Y+4, r19	; 0x04
    1e6e:	2b 83       	std	Y+3, r18	; 0x03
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	82 30       	cpi	r24, 0x02	; 2
    1e76:	91 05       	cpc	r25, r1
    1e78:	d9 f0       	breq	.+54     	; 0x1eb0 <DIO_voidSetPortDir+0x5a>
    1e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7e:	23 30       	cpi	r18, 0x03	; 3
    1e80:	31 05       	cpc	r19, r1
    1e82:	34 f4       	brge	.+12     	; 0x1e90 <DIO_voidSetPortDir+0x3a>
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <DIO_voidSetPortDir+0x50>
    1e8e:	1e c0       	rjmp	.+60     	; 0x1ecc <DIO_voidSetPortDir+0x76>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	3c 81       	ldd	r19, Y+4	; 0x04
    1e94:	23 30       	cpi	r18, 0x03	; 3
    1e96:	31 05       	cpc	r19, r1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <DIO_voidSetPortDir+0x64>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	84 30       	cpi	r24, 0x04	; 4
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <DIO_voidSetPortDir+0x6e>
    1ea4:	13 c0       	rjmp	.+38     	; 0x1ecc <DIO_voidSetPortDir+0x76>
	{
	case GroupA: DDRA = PortDir; break;
    1ea6:	ea e3       	ldi	r30, 0x3A	; 58
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <DIO_voidSetPortDir+0x76>
	case GroupB: DDRB = PortDir; break;
    1eb0:	e7 e3       	ldi	r30, 0x37	; 55
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <DIO_voidSetPortDir+0x76>
	case GroupC: DDRC = PortDir; break;
    1eba:	e4 e3       	ldi	r30, 0x34	; 52
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	80 83       	st	Z, r24
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <DIO_voidSetPortDir+0x76>
	case GroupD: DDRD = PortDir; break;
    1ec4:	e1 e3       	ldi	r30, 0x31	; 49
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 83       	st	Z, r24
	}
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8Reg,u8 PortValue)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <DIO_voidSetPortValue+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <DIO_voidSetPortValue+0x8>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Reg)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	3c 83       	std	Y+4, r19	; 0x04
    1ef2:	2b 83       	std	Y+3, r18	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	91 05       	cpc	r25, r1
    1efc:	d9 f0       	breq	.+54     	; 0x1f34 <DIO_voidSetPortValue+0x5a>
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	23 30       	cpi	r18, 0x03	; 3
    1f04:	31 05       	cpc	r19, r1
    1f06:	34 f4       	brge	.+12     	; 0x1f14 <DIO_voidSetPortValue+0x3a>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	61 f0       	breq	.+24     	; 0x1f2a <DIO_voidSetPortValue+0x50>
    1f12:	1e c0       	rjmp	.+60     	; 0x1f50 <DIO_voidSetPortValue+0x76>
    1f14:	2b 81       	ldd	r18, Y+3	; 0x03
    1f16:	3c 81       	ldd	r19, Y+4	; 0x04
    1f18:	23 30       	cpi	r18, 0x03	; 3
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	81 f0       	breq	.+32     	; 0x1f3e <DIO_voidSetPortValue+0x64>
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	84 30       	cpi	r24, 0x04	; 4
    1f24:	91 05       	cpc	r25, r1
    1f26:	81 f0       	breq	.+32     	; 0x1f48 <DIO_voidSetPortValue+0x6e>
    1f28:	13 c0       	rjmp	.+38     	; 0x1f50 <DIO_voidSetPortValue+0x76>
	{
	case GroupA: PORTA = PortValue; break;
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	80 83       	st	Z, r24
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <DIO_voidSetPortValue+0x76>
	case GroupB: PORTB = PortValue; break;
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
    1f3c:	09 c0       	rjmp	.+18     	; 0x1f50 <DIO_voidSetPortValue+0x76>
	case GroupC: PORTC = PortValue; break;
    1f3e:	e5 e3       	ldi	r30, 0x35	; 53
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	80 83       	st	Z, r24
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <DIO_voidSetPortValue+0x76>
	case GroupD: PORTD = PortValue; break;
    1f48:	e2 e3       	ldi	r30, 0x32	; 50
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	80 83       	st	Z, r24
	}
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <ADC_voidInit>:
#include "ADC_register.h"



void ADC_voidInit()
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
ADC_ADMUX  ->REFS  = REF_SELEC; //Reference Selection Bits
    1f66:	e7 e2       	ldi	r30, 0x27	; 39
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 6c       	ori	r24, 0xC0	; 192
    1f6e:	80 83       	st	Z, r24
ADC_ADMUX  ->ADLAR = ADJUST_RESULT;//ADC Adjust Result
    1f70:	e7 e2       	ldi	r30, 0x27	; 39
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 7d       	andi	r24, 0xDF	; 223
    1f78:	80 83       	st	Z, r24
ADC_ADCSRA ->ADPS  = DIVISION_FACTOR;//ADC Prescaler Select Bits
    1f7a:	e6 e2       	ldi	r30, 0x26	; 38
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 7f       	andi	r24, 0xF8	; 248
    1f82:	85 60       	ori	r24, 0x05	; 5
    1f84:	80 83       	st	Z, r24
ADC_ADCSRA ->ADEN  = ADC_ENABLE; // ADC Enable
    1f86:	e6 e2       	ldi	r30, 0x26	; 38
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 68       	ori	r24, 0x80	; 128
    1f8e:	80 83       	st	Z, r24
}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <ADC_u8GetReading>:

u16  ADC_u8GetReading(u8 copy_u8ADC_Channnel)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	27 97       	sbiw	r28, 0x07	; 7
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	8d 83       	std	Y+5, r24	; 0x05
	u16 Count = 0 ;
    1fac:	1c 82       	std	Y+4, r1	; 0x04
    1fae:	1b 82       	std	Y+3, r1	; 0x03
	u16 Data  = 0 ;
    1fb0:	1a 82       	std	Y+2, r1	; 0x02
    1fb2:	19 82       	std	Y+1, r1	; 0x01
	ADC_ADMUX  ->MUX = copy_u8ADC_Channnel ;//Choose channel of ADC 1-Single_ADC0 2-Single_ADC1 3-......
    1fb4:	e7 e2       	ldi	r30, 0x27	; 39
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	8f 71       	andi	r24, 0x1F	; 31
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	9f 71       	andi	r25, 0x1F	; 31
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 7e       	andi	r24, 0xE0	; 224
    1fc4:	89 2b       	or	r24, r25
    1fc6:	80 83       	st	Z, r24
	ADC_ADCSRA ->ADSC= ADC_START_CONVERSION;// Start conversion
    1fc8:	e6 e2       	ldi	r30, 0x26	; 38
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 64       	ori	r24, 0x40	; 64
    1fd0:	80 83       	st	Z, r24
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <ADC_u8GetReading+0x48>
	while(ADC_ADCSRA ->ADIF == 0 && Count < 10000)
	{
		Count++;
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	9c 83       	std	Y+4, r25	; 0x04
    1fdc:	8b 83       	std	Y+3, r24	; 0x03
{
	u16 Count = 0 ;
	u16 Data  = 0 ;
	ADC_ADMUX  ->MUX = copy_u8ADC_Channnel ;//Choose channel of ADC 1-Single_ADC0 2-Single_ADC1 3-......
	ADC_ADCSRA ->ADSC= ADC_START_CONVERSION;// Start conversion
	while(ADC_ADCSRA ->ADIF == 0 && Count < 10000)
    1fde:	e6 e2       	ldi	r30, 0x26	; 38
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	80 71       	andi	r24, 0x10	; 16
    1fe6:	88 23       	and	r24, r24
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <ADC_u8GetReading+0x60>
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	27 e2       	ldi	r18, 0x27	; 39
    1ff0:	80 31       	cpi	r24, 0x10	; 16
    1ff2:	92 07       	cpc	r25, r18
    1ff4:	78 f3       	brcs	.-34     	; 0x1fd4 <ADC_u8GetReading+0x3e>
	{
		Count++;
	}
	if(ADC_ADCSRA ->ADIF == 1 )
    1ff6:	e6 e2       	ldi	r30, 0x26	; 38
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 71       	andi	r24, 0x10	; 16
    1ffe:	88 23       	and	r24, r24
    2000:	81 f0       	breq	.+32     	; 0x2022 <ADC_u8GetReading+0x8c>
	{
	Data = ADC_DATA ;
    2002:	e4 e2       	ldi	r30, 0x24	; 36
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
	ADC_ADCSRA ->ADIF = 1 ;
    200e:	e6 e2       	ldi	r30, 0x26	; 38
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	80 61       	ori	r24, 0x10	; 16
    2016:	80 83       	st	Z, r24
	return Data ;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	9f 83       	std	Y+7, r25	; 0x07
    201e:	8e 83       	std	Y+6, r24	; 0x06
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <ADC_u8GetReading+0x90>
	}
	else
		return ERROR_TIME;
    2022:	1f 82       	std	Y+7, r1	; 0x07
    2024:	1e 82       	std	Y+6, r1	; 0x06
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
}
    202a:	27 96       	adiw	r28, 0x07	; 7
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <ADC_u32RangeToRange>:
u32  ADC_u32RangeToRange(u16 x,u16 x1,u16 y1,u16 x2,u16 y2)
{
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	2e 97       	sbiw	r28, 0x0e	; 14
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	78 87       	std	Y+8, r23	; 0x08
    205a:	6f 83       	std	Y+7, r22	; 0x07
    205c:	5a 87       	std	Y+10, r21	; 0x0a
    205e:	49 87       	std	Y+9, r20	; 0x09
    2060:	3c 87       	std	Y+12, r19	; 0x0c
    2062:	2b 87       	std	Y+11, r18	; 0x0b
    2064:	1e 87       	std	Y+14, r17	; 0x0e
    2066:	0d 87       	std	Y+13, r16	; 0x0d
	u32 y = 0;
    2068:	19 82       	std	Y+1, r1	; 0x01
    206a:	1a 82       	std	Y+2, r1	; 0x02
    206c:	1b 82       	std	Y+3, r1	; 0x03
    206e:	1c 82       	std	Y+4, r1	; 0x04
	y = (((x - x1)+(y2-y1))/(x2-x1))+y1 ;
    2070:	2d 81       	ldd	r18, Y+5	; 0x05
    2072:	3e 81       	ldd	r19, Y+6	; 0x06
    2074:	8f 81       	ldd	r24, Y+7	; 0x07
    2076:	98 85       	ldd	r25, Y+8	; 0x08
    2078:	a9 01       	movw	r20, r18
    207a:	48 1b       	sub	r20, r24
    207c:	59 0b       	sbc	r21, r25
    207e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2080:	3e 85       	ldd	r19, Y+14	; 0x0e
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	b9 01       	movw	r22, r18
    2088:	68 1b       	sub	r22, r24
    208a:	79 0b       	sbc	r23, r25
    208c:	cb 01       	movw	r24, r22
    208e:	48 0f       	add	r20, r24
    2090:	59 1f       	adc	r21, r25
    2092:	2b 85       	ldd	r18, Y+11	; 0x0b
    2094:	3c 85       	ldd	r19, Y+12	; 0x0c
    2096:	8f 81       	ldd	r24, Y+7	; 0x07
    2098:	98 85       	ldd	r25, Y+8	; 0x08
    209a:	28 1b       	sub	r18, r24
    209c:	39 0b       	sbc	r19, r25
    209e:	ca 01       	movw	r24, r20
    20a0:	b9 01       	movw	r22, r18
    20a2:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodhi4>
    20a6:	cb 01       	movw	r24, r22
    20a8:	9c 01       	movw	r18, r24
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	82 0f       	add	r24, r18
    20b0:	93 1f       	adc	r25, r19
    20b2:	cc 01       	movw	r24, r24
    20b4:	a0 e0       	ldi	r26, 0x00	; 0
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	ab 83       	std	Y+3, r26	; 0x03
    20be:	bc 83       	std	Y+4, r27	; 0x04
	return y ;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	ab 81       	ldd	r26, Y+3	; 0x03
    20c6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	2e 96       	adiw	r28, 0x0e	; 14
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <Switch_voidInit>:
#include "../../common/STD_types.h"
#include "../../MCAL/DIO/DIO_interface.h"


void Switch_voidInit(u8 copy_u8SwitchPort,u8 copy_u8SwitchPin)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <Switch_voidInit+0x6>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	6a 83       	std	Y+2, r22	; 0x02
DIO_voidSetPinDir(copy_u8SwitchPort,copy_u8SwitchPin,Input);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	6a 81       	ldd	r22, Y+2	; 0x02
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
DIO_voidSetPinValue(copy_u8SwitchPort,copy_u8SwitchPin,High);
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	6a 81       	ldd	r22, Y+2	; 0x02
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Switch_u8GetValue>:

u8 Switch_u8GetValue(u8 copy_u8SwitchPort,u8 copy_u8SwitchPin)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Switch_u8GetValue+0x6>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	6a 83       	std	Y+2, r22	; 0x02
 return DIO_u8GetPinValue(copy_u8SwitchPort, copy_u8SwitchPin);
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	6a 81       	ldd	r22, Y+2	; 0x02
    2120:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_u8GetPinValue>
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <Sev_voidInit>:
#elif SEV_TYPE == CATHODE
static char sev_Cathode[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
#endif

void Sev_voidInit()
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SEV_PORT,Output_Port);
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <DIO_voidSetPortDir>
}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <Sev_voidInitMulti>:

void Sev_voidInitMulti()
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SEV_PORT,Output_Port);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	6f ef       	ldi	r22, 0xFF	; 255
    2150:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <DIO_voidSetPortDir>
	DIO_voidSetPinDir(SEV_PORT_PINS,SEV_PIN_COMMON_0,Output);
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(SEV_PORT_PINS,SEV_PIN_COMMON_1,Output);
    215e:	84 e0       	ldi	r24, 0x04	; 4
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
}
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <Sev_voidDisplayMulti>:

void Sev_voidDisplayMulti( u8 copy_u8SevNum0 ,u8 copy_u8SevNum1)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	a0 97       	sbiw	r28, 0x20	; 32
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	8f 8f       	std	Y+31, r24	; 0x1f
    2184:	68 a3       	std	Y+32, r22	; 0x20
#if SEV_TYPE == CATHODE
	int	time = 0;
    2186:	1e 8e       	std	Y+30, r1	; 0x1e
    2188:	1d 8e       	std	Y+29, r1	; 0x1d
    218a:	03 c1       	rjmp	.+518    	; 0x2392 <Sev_voidDisplayMulti+0x224>
	while(time < (TIME / 20))
	{
		DIO_voidSetPinValue(SEV_PORT_PINS,SEV_PIN_COMMON_1,High);
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	61 e0       	ldi	r22, 0x01	; 1
    2190:	41 e0       	ldi	r20, 0x01	; 1
    2192:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		Sev_voidDisplay(copy_u8SevNum0);
    2196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2198:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Sev_voidDisplay>
		DIO_voidSetPinValue(SEV_PORT_PINS,SEV_PIN_COMMON_0,Low);
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e2       	ldi	r26, 0x20	; 32
    21ac:	b1 e4       	ldi	r27, 0x41	; 65
    21ae:	89 8f       	std	Y+25, r24	; 0x19
    21b0:	9a 8f       	std	Y+26, r25	; 0x1a
    21b2:	ab 8f       	std	Y+27, r26	; 0x1b
    21b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a ef       	ldi	r20, 0xFA	; 250
    21c4:	54 e4       	ldi	r21, 0x44	; 68
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8d 8b       	std	Y+21, r24	; 0x15
    21d0:	9e 8b       	std	Y+22, r25	; 0x16
    21d2:	af 8b       	std	Y+23, r26	; 0x17
    21d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <Sev_voidDisplayMulti+0x8a>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <Sev_voidDisplayMulti+0x108>
	else if (__tmp > 65535)
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <Sev_voidDisplayMulti+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	69 8d       	ldd	r22, Y+25	; 0x19
    2212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <Sev_voidDisplayMulti+0xea>
    223a:	88 ec       	ldi	r24, 0xC8	; 200
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	9a 89       	ldd	r25, Y+18	; 0x12
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <Sev_voidDisplayMulti+0xd8>
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <Sev_voidDisplayMulti+0xcc>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <Sev_voidDisplayMulti+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	98 8b       	std	Y+16, r25	; 0x10
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	98 89       	ldd	r25, Y+16	; 0x10
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <Sev_voidDisplayMulti+0x114>
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(SEV_PORT_PINS,SEV_PIN_COMMON_0,High);
    228a:	84 e0       	ldi	r24, 0x04	; 4
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	41 e0       	ldi	r20, 0x01	; 1
    2290:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		Sev_voidDisplay(copy_u8SevNum1);
    2294:	88 a1       	ldd	r24, Y+32	; 0x20
    2296:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Sev_voidDisplay>
		DIO_voidSetPinValue(SEV_PORT_PINS,SEV_PIN_COMMON_1,Low);
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e2       	ldi	r26, 0x20	; 32
    22aa:	b1 e4       	ldi	r27, 0x41	; 65
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <Sev_voidDisplayMulti+0x188>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <Sev_voidDisplayMulti+0x206>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <Sev_voidDisplayMulti+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <Sev_voidDisplayMulti+0x1e8>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <Sev_voidDisplayMulti+0x1d6>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <Sev_voidDisplayMulti+0x1ca>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <Sev_voidDisplayMulti+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <Sev_voidDisplayMulti+0x212>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		time ++;
    2388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	9e 8f       	std	Y+30, r25	; 0x1e
    2390:	8d 8f       	std	Y+29, r24	; 0x1d

void Sev_voidDisplayMulti( u8 copy_u8SevNum0 ,u8 copy_u8SevNum1)
{
#if SEV_TYPE == CATHODE
	int	time = 0;
	while(time < (TIME / 20))
    2392:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2394:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2396:	82 33       	cpi	r24, 0x32	; 50
    2398:	91 05       	cpc	r25, r1
    239a:	0c f4       	brge	.+2      	; 0x239e <Sev_voidDisplayMulti+0x230>
    239c:	f7 ce       	rjmp	.-530    	; 0x218c <Sev_voidDisplayMulti+0x1e>
		time ++;
	}

#endif

}
    239e:	a0 96       	adiw	r28, 0x20	; 32
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <Sev_voidDisplay>:
void Sev_voidDisplay(u8 copy_u8SevNum)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	0f 92       	push	r0
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	89 83       	std	Y+1, r24	; 0x01
#if   SEV_TYPE == CATHODE
	DIO_voidSetPortValue(SEV_PORT,sev_Cathode[copy_u8SevNum]);
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	fc 01       	movw	r30, r24
    23c4:	e8 59       	subi	r30, 0x98	; 152
    23c6:	fe 4f       	sbci	r31, 0xFE	; 254
    23c8:	90 81       	ld	r25, Z
    23ca:	82 e0       	ldi	r24, 0x02	; 2
    23cc:	69 2f       	mov	r22, r25
    23ce:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DIO_voidSetPortValue>

#elif SEV_TYPE == ANODE
	DIO_voidSetPortValue(SEV_PORT,sev_Anode[copy_u8SevNum]);

#endif
}
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <LED_voidInit>:
#include "LED_config.h"
#include "LED_interface.h"
#include "LED_private.h"

void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin )
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <LED_voidInit+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(copy_u8LedPort,  copy_u8LedPin ,Output );
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	6a 81       	ldd	r22, Y+2	; 0x02
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <LED_voidOn>:
void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin )
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	00 d0       	rcall	.+0      	; 0x2402 <LED_voidOn+0x6>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(copy_u8LedPort,  copy_u8LedPin ,High);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	6a 81       	ldd	r22, Y+2	; 0x02
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <LED_voidOff>:
void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin )
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	00 d0       	rcall	.+0      	; 0x2424 <LED_voidOff+0x6>
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(copy_u8LedPort,copy_u8LedPin ,Low);
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	6a 81       	ldd	r22, Y+2	; 0x02
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_voidWriteCommand>:
#include "LCD_interface.h"
#include <util/delay.h>
#include "LCD_config.h"

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	6d 97       	sbiw	r28, 0x1d	; 29
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CTRLPORT,LCD_E,Low);   //  set Value of E as LOW ( unenable pulse)
	_delay_ms(2);

#elif LCD_MODE  == FOUR_PIN
	DIO_voidSetPinValue(LCD4_RS_PORT,LCD4_RS_PIN,Low); // set Value of RS as LOW to send Command
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_RW_PORT,LCD4_RW_PIN,Low);// set Value of RW as LOW to Write on LCD
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	/********************************************************************************/
	/************* write command on Most port of data********************************/
	DIO_voidSetPinValue(LCD4_D7_PORT,LCD4_D7_PIN,get_Bit(copy_u8Command,PIN7));
    246a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246c:	98 2f       	mov	r25, r24
    246e:	99 1f       	adc	r25, r25
    2470:	99 27       	eor	r25, r25
    2472:	99 1f       	adc	r25, r25
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	67 e0       	ldi	r22, 0x07	; 7
    2478:	49 2f       	mov	r20, r25
    247a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D6_PORT,LCD4_D6_PIN,get_Bit(copy_u8Command,PIN6));
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	82 95       	swap	r24
    2482:	86 95       	lsr	r24
    2484:	86 95       	lsr	r24
    2486:	83 70       	andi	r24, 0x03	; 3
    2488:	98 2f       	mov	r25, r24
    248a:	91 70       	andi	r25, 0x01	; 1
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	66 e0       	ldi	r22, 0x06	; 6
    2490:	49 2f       	mov	r20, r25
    2492:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D5_PORT,LCD4_D5_PIN,get_Bit(copy_u8Command,PIN5));
    2496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2498:	82 95       	swap	r24
    249a:	86 95       	lsr	r24
    249c:	87 70       	andi	r24, 0x07	; 7
    249e:	98 2f       	mov	r25, r24
    24a0:	91 70       	andi	r25, 0x01	; 1
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	65 e0       	ldi	r22, 0x05	; 5
    24a6:	49 2f       	mov	r20, r25
    24a8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D4_PORT,LCD4_D4_PIN,get_Bit(copy_u8Command,PIN4));
    24ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ae:	82 95       	swap	r24
    24b0:	8f 70       	andi	r24, 0x0F	; 15
    24b2:	98 2f       	mov	r25, r24
    24b4:	91 70       	andi	r25, 0x01	; 1
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	64 e0       	ldi	r22, 0x04	; 4
    24ba:	49 2f       	mov	r20, r25
    24bc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,High);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	62 e0       	ldi	r22, 0x02	; 2
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e4       	ldi	r27, 0x40	; 64
    24d2:	89 8f       	std	Y+25, r24	; 0x19
    24d4:	9a 8f       	std	Y+26, r25	; 0x1a
    24d6:	ab 8f       	std	Y+27, r26	; 0x1b
    24d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	69 8d       	ldd	r22, Y+25	; 0x19
    24dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	4a ef       	ldi	r20, 0xFA	; 250
    24e8:	54 e4       	ldi	r21, 0x44	; 68
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	8d 8b       	std	Y+21, r24	; 0x15
    24f4:	9e 8b       	std	Y+22, r25	; 0x16
    24f6:	af 8b       	std	Y+23, r26	; 0x17
    24f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24fa:	6d 89       	ldd	r22, Y+21	; 0x15
    24fc:	7e 89       	ldd	r23, Y+22	; 0x16
    24fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2500:	98 8d       	ldd	r25, Y+24	; 0x18
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e8       	ldi	r20, 0x80	; 128
    2508:	5f e3       	ldi	r21, 0x3F	; 63
    250a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250e:	88 23       	and	r24, r24
    2510:	2c f4       	brge	.+10     	; 0x251c <LCD_voidWriteCommand+0xdc>
		__ticks = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9c 8b       	std	Y+20, r25	; 0x14
    2518:	8b 8b       	std	Y+19, r24	; 0x13
    251a:	3f c0       	rjmp	.+126    	; 0x259a <LCD_voidWriteCommand+0x15a>
	else if (__tmp > 65535)
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	3f ef       	ldi	r19, 0xFF	; 255
    2528:	4f e7       	ldi	r20, 0x7F	; 127
    252a:	57 e4       	ldi	r21, 0x47	; 71
    252c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2530:	18 16       	cp	r1, r24
    2532:	4c f5       	brge	.+82     	; 0x2586 <LCD_voidWriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9c 8b       	std	Y+20, r25	; 0x14
    255a:	8b 8b       	std	Y+19, r24	; 0x13
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_voidWriteCommand+0x13c>
    255e:	88 ec       	ldi	r24, 0xC8	; 200
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9a 8b       	std	Y+18, r25	; 0x12
    2564:	89 8b       	std	Y+17, r24	; 0x11
    2566:	89 89       	ldd	r24, Y+17	; 0x11
    2568:	9a 89       	ldd	r25, Y+18	; 0x12
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_voidWriteCommand+0x12a>
    256e:	9a 8b       	std	Y+18, r25	; 0x12
    2570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8b 89       	ldd	r24, Y+19	; 0x13
    2574:	9c 89       	ldd	r25, Y+20	; 0x14
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9c 8b       	std	Y+20, r25	; 0x14
    257a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8b 89       	ldd	r24, Y+19	; 0x13
    257e:	9c 89       	ldd	r25, Y+20	; 0x14
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <LCD_voidWriteCommand+0x11e>
    2584:	14 c0       	rjmp	.+40     	; 0x25ae <LCD_voidWriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	6d 89       	ldd	r22, Y+21	; 0x15
    2588:	7e 89       	ldd	r23, Y+22	; 0x16
    258a:	8f 89       	ldd	r24, Y+23	; 0x17
    258c:	98 8d       	ldd	r25, Y+24	; 0x18
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9c 8b       	std	Y+20, r25	; 0x14
    2598:	8b 8b       	std	Y+19, r24	; 0x13
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	98 8b       	std	Y+16, r25	; 0x10
    25a0:	8f 87       	std	Y+15, r24	; 0x0f
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	98 89       	ldd	r25, Y+16	; 0x10
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_voidWriteCommand+0x166>
    25aa:	98 8b       	std	Y+16, r25	; 0x10
    25ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,Low);
    25ae:	83 e0       	ldi	r24, 0x03	; 3
    25b0:	62 e0       	ldi	r22, 0x02	; 2
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	/********************************************************************************/
	/************* write command on Least port of data********************************/
	DIO_voidSetPinValue(LCD4_D7_PORT,LCD4_D7_PIN,get_Bit(copy_u8Command,PIN3));
    25b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ba:	86 95       	lsr	r24
    25bc:	86 95       	lsr	r24
    25be:	86 95       	lsr	r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	91 70       	andi	r25, 0x01	; 1
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	67 e0       	ldi	r22, 0x07	; 7
    25c8:	49 2f       	mov	r20, r25
    25ca:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D6_PORT,LCD4_D6_PIN,get_Bit(copy_u8Command,PIN2));
    25ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d0:	86 95       	lsr	r24
    25d2:	86 95       	lsr	r24
    25d4:	98 2f       	mov	r25, r24
    25d6:	91 70       	andi	r25, 0x01	; 1
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	66 e0       	ldi	r22, 0x06	; 6
    25dc:	49 2f       	mov	r20, r25
    25de:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D5_PORT,LCD4_D5_PIN,get_Bit(copy_u8Command,PIN1));
    25e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e4:	86 95       	lsr	r24
    25e6:	98 2f       	mov	r25, r24
    25e8:	91 70       	andi	r25, 0x01	; 1
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	49 2f       	mov	r20, r25
    25f0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D4_PORT,LCD4_D4_PIN,get_Bit(copy_u8Command,PIN0));
    25f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f6:	98 2f       	mov	r25, r24
    25f8:	91 70       	andi	r25, 0x01	; 1
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	64 e0       	ldi	r22, 0x04	; 4
    25fe:	49 2f       	mov	r20, r25
    2600:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,High);
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e4       	ldi	r27, 0x40	; 64
    2616:	8b 87       	std	Y+11, r24	; 0x0b
    2618:	9c 87       	std	Y+12, r25	; 0x0c
    261a:	ad 87       	std	Y+13, r26	; 0x0d
    261c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8f 83       	std	Y+7, r24	; 0x07
    2638:	98 87       	std	Y+8, r25	; 0x08
    263a:	a9 87       	std	Y+9, r26	; 0x09
    263c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <LCD_voidWriteCommand+0x220>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	3f c0       	rjmp	.+126    	; 0x26de <LCD_voidWriteCommand+0x29e>
	else if (__tmp > 65535)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <LCD_voidWriteCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	6b 85       	ldd	r22, Y+11	; 0x0b
    267a:	7c 85       	ldd	r23, Y+12	; 0x0c
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <LCD_voidWriteCommand+0x280>
    26a2:	88 ec       	ldi	r24, 0xC8	; 200
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_voidWriteCommand+0x26e>
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <LCD_voidWriteCommand+0x262>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <LCD_voidWriteCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_voidWriteCommand+0x2aa>
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,Low);
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	62 e0       	ldi	r22, 0x02	; 2
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>


#endif
}
    26fc:	6d 96       	adiw	r28, 0x1d	; 29
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <LCD_voidInit>:

void LCD_voidInit()
{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	2e 97       	sbiw	r28, 0x0e	; 14
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
	LCD_voidWriteCommand(0x01);
	_delay_ms(2);
	LCD_voidWriteCommand(0x06);
#elif LCD_MODE  == FOUR_PIN
	/**************set Direction of DATA PINS as OUTPUT*******************/
	DIO_voidSetPinDir(LCD4_D7_PORT,LCD4_D7_PIN,Output);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	67 e0       	ldi	r22, 0x07	; 7
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD4_D6_PORT,LCD4_D6_PIN,Output);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	66 e0       	ldi	r22, 0x06	; 6
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD4_D5_PORT,LCD4_D5_PIN,Output);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	65 e0       	ldi	r22, 0x05	; 5
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD4_D4_PORT,LCD4_D4_PIN,Output);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	64 e0       	ldi	r22, 0x04	; 4
    2744:	41 e0       	ldi	r20, 0x01	; 1
    2746:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>

	DIO_voidSetPinDir(LCD4_E_PORT,LCD4_E_PIN,Output);   //set Direction of E as OUTPUT
    274a:	83 e0       	ldi	r24, 0x03	; 3
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD4_RS_PORT,LCD4_RS_PIN,Output); //set Direction of RS as OUTPUT
    2754:	83 e0       	ldi	r24, 0x03	; 3
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD4_RW_PORT,LCD4_RW_PIN,Output); //set Direction of RW as OUTPUT
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e2       	ldi	r26, 0x20	; 32
    276e:	b2 e4       	ldi	r27, 0x42	; 66
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	7c 85       	ldd	r23, Y+12	; 0x0c
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8f 83       	std	Y+7, r24	; 0x07
    2792:	98 87       	std	Y+8, r25	; 0x08
    2794:	a9 87       	std	Y+9, r26	; 0x09
    2796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_voidInit+0xac>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <LCD_voidInit+0x12a>
	else if (__tmp > 65535)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <LCD_voidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_voidInit+0x10c>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_voidInit+0xfa>
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <LCD_voidInit+0xee>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <LCD_voidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_voidInit+0x136>
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
	LCD_voidWriteCommand(0x02);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>

	LCD_voidWriteCommand(0x28);
    2852:	88 e2       	ldi	r24, 0x28	; 40
    2854:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>

	LCD_voidWriteCommand(0x0C);
    2858:	8c e0       	ldi	r24, 0x0C	; 12
    285a:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>

	LCD_voidWriteCommand(0x01);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>

	LCD_voidWriteCommand(0x06);
    2864:	86 e0       	ldi	r24, 0x06	; 6
    2866:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>

#endif
}
    286a:	2e 96       	adiw	r28, 0x0e	; 14
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <LCD_voidIClear>:
void LCD_voidIClear()
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(0x01);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>
}
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <LCD_voidWriteChar>:


void LCD_voidWriteChar(u8 copy_u8Char)
{
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	e9 97       	sbiw	r28, 0x39	; 57
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(LCD_CTRLPORT,LCD_E,High);   // set Value of E as HIGH ( enable pulse)
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CTRLPORT,LCD_E,Low);   //  set Value of E as LOW ( unenable pulse)

#elif LCD_MODE  == FOUR_PIN
	DIO_voidSetPinValue(LCD4_RS_PORT,LCD4_RS_PIN,High); // set Value of RS as HIGH to send DATA
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_RW_PORT,LCD4_RW_PIN,Low);// set Value of RW as LOW to Write on LCD
    28b0:	83 e0       	ldi	r24, 0x03	; 3
    28b2:	61 e0       	ldi	r22, 0x01	; 1
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	/********************************************************************************/
	/************* write DATA on Most port of data********************************/
	DIO_voidSetPinValue(LCD4_D7_PORT,LCD4_D7_PIN,get_Bit(copy_u8Char,PIN7));
    28ba:	89 ad       	ldd	r24, Y+57	; 0x39
    28bc:	98 2f       	mov	r25, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	99 27       	eor	r25, r25
    28c2:	99 1f       	adc	r25, r25
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	67 e0       	ldi	r22, 0x07	; 7
    28c8:	49 2f       	mov	r20, r25
    28ca:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D6_PORT,LCD4_D6_PIN,get_Bit(copy_u8Char,PIN6));
    28ce:	89 ad       	ldd	r24, Y+57	; 0x39
    28d0:	82 95       	swap	r24
    28d2:	86 95       	lsr	r24
    28d4:	86 95       	lsr	r24
    28d6:	83 70       	andi	r24, 0x03	; 3
    28d8:	98 2f       	mov	r25, r24
    28da:	91 70       	andi	r25, 0x01	; 1
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	66 e0       	ldi	r22, 0x06	; 6
    28e0:	49 2f       	mov	r20, r25
    28e2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D5_PORT,LCD4_D5_PIN,get_Bit(copy_u8Char,PIN5));
    28e6:	89 ad       	ldd	r24, Y+57	; 0x39
    28e8:	82 95       	swap	r24
    28ea:	86 95       	lsr	r24
    28ec:	87 70       	andi	r24, 0x07	; 7
    28ee:	98 2f       	mov	r25, r24
    28f0:	91 70       	andi	r25, 0x01	; 1
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	65 e0       	ldi	r22, 0x05	; 5
    28f6:	49 2f       	mov	r20, r25
    28f8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D4_PORT,LCD4_D4_PIN,get_Bit(copy_u8Char,PIN4));
    28fc:	89 ad       	ldd	r24, Y+57	; 0x39
    28fe:	82 95       	swap	r24
    2900:	8f 70       	andi	r24, 0x0F	; 15
    2902:	98 2f       	mov	r25, r24
    2904:	91 70       	andi	r25, 0x01	; 1
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	64 e0       	ldi	r22, 0x04	; 4
    290a:	49 2f       	mov	r20, r25
    290c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,High);
    2910:	83 e0       	ldi	r24, 0x03	; 3
    2912:	62 e0       	ldi	r22, 0x02	; 2
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e0       	ldi	r26, 0x00	; 0
    2920:	b0 e4       	ldi	r27, 0x40	; 64
    2922:	8d ab       	std	Y+53, r24	; 0x35
    2924:	9e ab       	std	Y+54, r25	; 0x36
    2926:	af ab       	std	Y+55, r26	; 0x37
    2928:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6d a9       	ldd	r22, Y+53	; 0x35
    292c:	7e a9       	ldd	r23, Y+54	; 0x36
    292e:	8f a9       	ldd	r24, Y+55	; 0x37
    2930:	98 ad       	ldd	r25, Y+56	; 0x38
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a ef       	ldi	r20, 0xFA	; 250
    2938:	54 e4       	ldi	r21, 0x44	; 68
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	89 ab       	std	Y+49, r24	; 0x31
    2944:	9a ab       	std	Y+50, r25	; 0x32
    2946:	ab ab       	std	Y+51, r26	; 0x33
    2948:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    294a:	69 a9       	ldd	r22, Y+49	; 0x31
    294c:	7a a9       	ldd	r23, Y+50	; 0x32
    294e:	8b a9       	ldd	r24, Y+51	; 0x33
    2950:	9c a9       	ldd	r25, Y+52	; 0x34
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <LCD_voidWriteChar+0xdc>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <LCD_voidWriteChar+0x15a>
	else if (__tmp > 65535)
    296c:	69 a9       	ldd	r22, Y+49	; 0x31
    296e:	7a a9       	ldd	r23, Y+50	; 0x32
    2970:	8b a9       	ldd	r24, Y+51	; 0x33
    2972:	9c a9       	ldd	r25, Y+52	; 0x34
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <LCD_voidWriteChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6d a9       	ldd	r22, Y+53	; 0x35
    2986:	7e a9       	ldd	r23, Y+54	; 0x36
    2988:	8f a9       	ldd	r24, Y+55	; 0x37
    298a:	98 ad       	ldd	r25, Y+56	; 0x38
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <LCD_voidWriteChar+0x13c>
    29ae:	88 ec       	ldi	r24, 0xC8	; 200
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9e a7       	std	Y+46, r25	; 0x2e
    29b4:	8d a7       	std	Y+45, r24	; 0x2d
    29b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_voidWriteChar+0x12a>
    29be:	9e a7       	std	Y+46, r25	; 0x2e
    29c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	98 a9       	ldd	r25, Y+48	; 0x30
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ce:	98 a9       	ldd	r25, Y+48	; 0x30
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <LCD_voidWriteChar+0x11e>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <LCD_voidWriteChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	69 a9       	ldd	r22, Y+49	; 0x31
    29d8:	7a a9       	ldd	r23, Y+50	; 0x32
    29da:	8b a9       	ldd	r24, Y+51	; 0x33
    29dc:	9c a9       	ldd	r25, Y+52	; 0x34
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
    29ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ec:	98 a9       	ldd	r25, Y+48	; 0x30
    29ee:	9c a7       	std	Y+44, r25	; 0x2c
    29f0:	8b a7       	std	Y+43, r24	; 0x2b
    29f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_voidWriteChar+0x166>
    29fa:	9c a7       	std	Y+44, r25	; 0x2c
    29fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,Low);
    29fe:	83 e0       	ldi	r24, 0x03	; 3
    2a00:	62 e0       	ldi	r22, 0x02	; 2
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e4       	ldi	r27, 0x40	; 64
    2a10:	8f a3       	std	Y+39, r24	; 0x27
    2a12:	98 a7       	std	Y+40, r25	; 0x28
    2a14:	a9 a7       	std	Y+41, r26	; 0x29
    2a16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a18:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	4a ef       	ldi	r20, 0xFA	; 250
    2a26:	54 e4       	ldi	r21, 0x44	; 68
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8b a3       	std	Y+35, r24	; 0x23
    2a32:	9c a3       	std	Y+36, r25	; 0x24
    2a34:	ad a3       	std	Y+37, r26	; 0x25
    2a36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_voidWriteChar+0x1ca>
		__ticks = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	3f c0       	rjmp	.+126    	; 0x2ad8 <LCD_voidWriteChar+0x248>
	else if (__tmp > 65535)
    2a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a60:	9e a1       	ldd	r25, Y+38	; 0x26
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	4c f5       	brge	.+82     	; 0x2ac4 <LCD_voidWriteChar+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	6f a1       	ldd	r22, Y+39	; 0x27
    2a74:	78 a5       	ldd	r23, Y+40	; 0x28
    2a76:	89 a5       	ldd	r24, Y+41	; 0x29
    2a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e2       	ldi	r20, 0x20	; 32
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <LCD_voidWriteChar+0x22a>
    2a9c:	88 ec       	ldi	r24, 0xC8	; 200
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	98 a3       	std	Y+32, r25	; 0x20
    2aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_voidWriteChar+0x218>
    2aac:	98 a3       	std	Y+32, r25	; 0x20
    2aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	89 a1       	ldd	r24, Y+33	; 0x21
    2abc:	9a a1       	ldd	r25, Y+34	; 0x22
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	69 f7       	brne	.-38     	; 0x2a9c <LCD_voidWriteChar+0x20c>
    2ac2:	14 c0       	rjmp	.+40     	; 0x2aec <LCD_voidWriteChar+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aca:	9e a1       	ldd	r25, Y+38	; 0x26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ade:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_voidWriteChar+0x254>
    2ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/********************************************************************************/
	/************* write DATA on Least port of data********************************/
	DIO_voidSetPinValue(LCD4_D7_PORT,LCD4_D7_PIN,get_Bit(copy_u8Char,PIN3));
    2aec:	89 ad       	ldd	r24, Y+57	; 0x39
    2aee:	86 95       	lsr	r24
    2af0:	86 95       	lsr	r24
    2af2:	86 95       	lsr	r24
    2af4:	98 2f       	mov	r25, r24
    2af6:	91 70       	andi	r25, 0x01	; 1
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	67 e0       	ldi	r22, 0x07	; 7
    2afc:	49 2f       	mov	r20, r25
    2afe:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D6_PORT,LCD4_D6_PIN,get_Bit(copy_u8Char,PIN2));
    2b02:	89 ad       	ldd	r24, Y+57	; 0x39
    2b04:	86 95       	lsr	r24
    2b06:	86 95       	lsr	r24
    2b08:	98 2f       	mov	r25, r24
    2b0a:	91 70       	andi	r25, 0x01	; 1
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	66 e0       	ldi	r22, 0x06	; 6
    2b10:	49 2f       	mov	r20, r25
    2b12:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D5_PORT,LCD4_D5_PIN,get_Bit(copy_u8Char,PIN1));
    2b16:	89 ad       	ldd	r24, Y+57	; 0x39
    2b18:	86 95       	lsr	r24
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	91 70       	andi	r25, 0x01	; 1
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	65 e0       	ldi	r22, 0x05	; 5
    2b22:	49 2f       	mov	r20, r25
    2b24:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD4_D4_PORT,LCD4_D4_PIN,get_Bit(copy_u8Char,PIN0));
    2b28:	89 ad       	ldd	r24, Y+57	; 0x39
    2b2a:	98 2f       	mov	r25, r24
    2b2c:	91 70       	andi	r25, 0x01	; 1
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	64 e0       	ldi	r22, 0x04	; 4
    2b32:	49 2f       	mov	r20, r25
    2b34:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,High);
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	62 e0       	ldi	r22, 0x02	; 2
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e4       	ldi	r27, 0x40	; 64
    2b4a:	89 8f       	std	Y+25, r24	; 0x19
    2b4c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b4e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b52:	69 8d       	ldd	r22, Y+25	; 0x19
    2b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8d 8b       	std	Y+21, r24	; 0x15
    2b6c:	9e 8b       	std	Y+22, r25	; 0x16
    2b6e:	af 8b       	std	Y+23, r26	; 0x17
    2b70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b72:	6d 89       	ldd	r22, Y+21	; 0x15
    2b74:	7e 89       	ldd	r23, Y+22	; 0x16
    2b76:	8f 89       	ldd	r24, Y+23	; 0x17
    2b78:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b86:	88 23       	and	r24, r24
    2b88:	2c f4       	brge	.+10     	; 0x2b94 <LCD_voidWriteChar+0x304>
		__ticks = 1;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	9c 8b       	std	Y+20, r25	; 0x14
    2b90:	8b 8b       	std	Y+19, r24	; 0x13
    2b92:	3f c0       	rjmp	.+126    	; 0x2c12 <LCD_voidWriteChar+0x382>
	else if (__tmp > 65535)
    2b94:	6d 89       	ldd	r22, Y+21	; 0x15
    2b96:	7e 89       	ldd	r23, Y+22	; 0x16
    2b98:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba8:	18 16       	cp	r1, r24
    2baa:	4c f5       	brge	.+82     	; 0x2bfe <LCD_voidWriteChar+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bac:	69 8d       	ldd	r22, Y+25	; 0x19
    2bae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
    2bd2:	8b 8b       	std	Y+19, r24	; 0x13
    2bd4:	0f c0       	rjmp	.+30     	; 0x2bf4 <LCD_voidWriteChar+0x364>
    2bd6:	88 ec       	ldi	r24, 0xC8	; 200
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9a 8b       	std	Y+18, r25	; 0x12
    2bdc:	89 8b       	std	Y+17, r24	; 0x11
    2bde:	89 89       	ldd	r24, Y+17	; 0x11
    2be0:	9a 89       	ldd	r25, Y+18	; 0x12
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_voidWriteChar+0x352>
    2be6:	9a 8b       	std	Y+18, r25	; 0x12
    2be8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	69 f7       	brne	.-38     	; 0x2bd6 <LCD_voidWriteChar+0x346>
    2bfc:	14 c0       	rjmp	.+40     	; 0x2c26 <LCD_voidWriteChar+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2c00:	7e 89       	ldd	r23, Y+22	; 0x16
    2c02:	8f 89       	ldd	r24, Y+23	; 0x17
    2c04:	98 8d       	ldd	r25, Y+24	; 0x18
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9c 8b       	std	Y+20, r25	; 0x14
    2c10:	8b 8b       	std	Y+19, r24	; 0x13
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	98 8b       	std	Y+16, r25	; 0x10
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
    2c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1c:	98 89       	ldd	r25, Y+16	; 0x10
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <LCD_voidWriteChar+0x38e>
    2c22:	98 8b       	std	Y+16, r25	; 0x10
    2c24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(LCD4_E_PORT,LCD4_E_PIN,Low);
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	62 e0       	ldi	r22, 0x02	; 2
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	b0 e4       	ldi	r27, 0x40	; 64
    2c38:	8b 87       	std	Y+11, r24	; 0x0b
    2c3a:	9c 87       	std	Y+12, r25	; 0x0c
    2c3c:	ad 87       	std	Y+13, r26	; 0x0d
    2c3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a ef       	ldi	r20, 0xFA	; 250
    2c4e:	54 e4       	ldi	r21, 0x44	; 68
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	8f 83       	std	Y+7, r24	; 0x07
    2c5a:	98 87       	std	Y+8, r25	; 0x08
    2c5c:	a9 87       	std	Y+9, r26	; 0x09
    2c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c60:	6f 81       	ldd	r22, Y+7	; 0x07
    2c62:	78 85       	ldd	r23, Y+8	; 0x08
    2c64:	89 85       	ldd	r24, Y+9	; 0x09
    2c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c74:	88 23       	and	r24, r24
    2c76:	2c f4       	brge	.+10     	; 0x2c82 <LCD_voidWriteChar+0x3f2>
		__ticks = 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	3f c0       	rjmp	.+126    	; 0x2d00 <LCD_voidWriteChar+0x470>
	else if (__tmp > 65535)
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	4c f5       	brge	.+82     	; 0x2cec <LCD_voidWriteChar+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <LCD_voidWriteChar+0x452>
    2cc4:	88 ec       	ldi	r24, 0xC8	; 200
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_voidWriteChar+0x440>
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	69 f7       	brne	.-38     	; 0x2cc4 <LCD_voidWriteChar+0x434>
    2cea:	14 c0       	rjmp	.+40     	; 0x2d14 <LCD_voidWriteChar+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	6f 81       	ldd	r22, Y+7	; 0x07
    2cee:	78 85       	ldd	r23, Y+8	; 0x08
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_voidWriteChar+0x47c>
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2d14:	e9 96       	adiw	r28, 0x39	; 57
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 copy_u8Coloumn,u8 copy_u8Row)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <LCD_voidGoToXY+0x6>
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	8a 83       	std	Y+2, r24	; 0x02
    2d34:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress =0x80;
    2d36:	80 e8       	ldi	r24, 0x80	; 128
    2d38:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8Row == 0 )
    2d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3c:	88 23       	and	r24, r24
    2d3e:	29 f4       	brne	.+10     	; 0x2d4a <LCD_voidGoToXY+0x24>
	{
		adress += copy_u8Coloumn;
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	9a 81       	ldd	r25, Y+2	; 0x02
    2d44:	89 0f       	add	r24, r25
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	1a c0       	rjmp	.+52     	; 0x2d7e <LCD_voidGoToXY+0x58>
	}
	else if(copy_u8Row == 1)
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	31 f4       	brne	.+12     	; 0x2d5c <LCD_voidGoToXY+0x36>
	{
		adress += (copy_u8Coloumn + 0x40);
    2d50:	9a 81       	ldd	r25, Y+2	; 0x02
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	89 0f       	add	r24, r25
    2d56:	80 5c       	subi	r24, 0xC0	; 192
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	11 c0       	rjmp	.+34     	; 0x2d7e <LCD_voidGoToXY+0x58>

	}
	else if(copy_u8Row == 2)
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	82 30       	cpi	r24, 0x02	; 2
    2d60:	31 f4       	brne	.+12     	; 0x2d6e <LCD_voidGoToXY+0x48>
	{
		adress += (copy_u8Coloumn + 0x14);
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	89 0f       	add	r24, r25
    2d68:	8c 5e       	subi	r24, 0xEC	; 236
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	08 c0       	rjmp	.+16     	; 0x2d7e <LCD_voidGoToXY+0x58>

	}
	else if(copy_u8Row == 3)
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	83 30       	cpi	r24, 0x03	; 3
    2d72:	29 f4       	brne	.+10     	; 0x2d7e <LCD_voidGoToXY+0x58>
	{
		adress += (copy_u8Coloumn + 0x54);
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	89 0f       	add	r24, r25
    2d7a:	8c 5a       	subi	r24, 0xAC	; 172
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidWriteCommand(adress);
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>
}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <LCD_voidWriteString>:

void LCD_voidWriteString(char *copy_u8Char)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <LCD_voidWriteString+0x6>
    2d96:	0f 92       	push	r0
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	9b 83       	std	Y+3, r25	; 0x03
    2d9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 count = 0 ;
    2da0:	19 82       	std	Y+1, r1	; 0x01
    2da2:	0e c0       	rjmp	.+28     	; 0x2dc0 <LCD_voidWriteString+0x30>
	while(copy_u8Char[count]!='\0')
	{
		LCD_voidWriteChar(copy_u8Char[count]);
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	fc 01       	movw	r30, r24
    2db0:	e2 0f       	add	r30, r18
    2db2:	f3 1f       	adc	r31, r19
    2db4:	80 81       	ld	r24, Z
    2db6:	0e 94 48 14 	call	0x2890	; 0x2890 <LCD_voidWriteChar>
		count++;
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(char *copy_u8Char)
{
	u8 count = 0 ;
	while(copy_u8Char[count]!='\0')
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e2 0f       	add	r30, r18
    2dce:	f3 1f       	adc	r31, r19
    2dd0:	80 81       	ld	r24, Z
    2dd2:	88 23       	and	r24, r24
    2dd4:	39 f7       	brne	.-50     	; 0x2da4 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteChar(copy_u8Char[count]);
		count++;
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(s16 copy_u8Num)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	2f 97       	sbiw	r28, 0x0f	; 15
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	9f 87       	std	Y+15, r25	; 0x0f
    2df8:	8e 87       	std	Y+14, r24	; 0x0e
	u8 Number[10];
	u8 count = 0;
    2dfa:	1b 82       	std	Y+3, r1	; 0x03
	do
	{
		Number[count] = (copy_u8Num%10) + '0' ;
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	e8 2f       	mov	r30, r24
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e06:	2a e0       	ldi	r18, 0x0A	; 10
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	b9 01       	movw	r22, r18
    2e0c:	0e 94 34 19 	call	0x3268	; 0x3268 <__divmodhi4>
    2e10:	28 2f       	mov	r18, r24
    2e12:	20 5d       	subi	r18, 0xD0	; 208
    2e14:	ce 01       	movw	r24, r28
    2e16:	04 96       	adiw	r24, 0x04	; 4
    2e18:	e8 0f       	add	r30, r24
    2e1a:	f9 1f       	adc	r31, r25
    2e1c:	20 83       	st	Z, r18
		copy_u8Num /=10;
    2e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e20:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e22:	2a e0       	ldi	r18, 0x0A	; 10
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	b9 01       	movw	r22, r18
    2e28:	0e 94 34 19 	call	0x3268	; 0x3268 <__divmodhi4>
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9f 87       	std	Y+15, r25	; 0x0f
    2e30:	8e 87       	std	Y+14, r24	; 0x0e
		count++;
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	8b 83       	std	Y+3, r24	; 0x03

	}while(copy_u8Num!= 0);
    2e38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	f1 f6       	brne	.-68     	; 0x2dfc <LCD_voidWriteNumber+0x1a>
	for(int i =(count-1);i >=0 ;i--)
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <LCD_voidWriteNumber+0x8a>
	{
		LCD_voidWriteChar(Number[i]);
    2e4e:	29 81       	ldd	r18, Y+1	; 0x01
    2e50:	3a 81       	ldd	r19, Y+2	; 0x02
    2e52:	ce 01       	movw	r24, r28
    2e54:	04 96       	adiw	r24, 0x04	; 4
    2e56:	fc 01       	movw	r30, r24
    2e58:	e2 0f       	add	r30, r18
    2e5a:	f3 1f       	adc	r31, r19
    2e5c:	80 81       	ld	r24, Z
    2e5e:	0e 94 48 14 	call	0x2890	; 0x2890 <LCD_voidWriteChar>
		Number[count] = (copy_u8Num%10) + '0' ;
		copy_u8Num /=10;
		count++;

	}while(copy_u8Num!= 0);
	for(int i =(count-1);i >=0 ;i--)
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e70:	99 23       	and	r25, r25
    2e72:	6c f7       	brge	.-38     	; 0x2e4e <LCD_voidWriteNumber+0x6c>
	{
		LCD_voidWriteChar(Number[i]);
	}
}
    2e74:	2f 96       	adiw	r28, 0x0f	; 15
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <LCD_voidCreatCustmChar>:

void LCD_voidCreatCustmChar(u8 copy_u8Adress,u8 *customChar)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <LCD_voidCreatCustmChar+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <LCD_voidCreatCustmChar+0x8>
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	7c 83       	std	Y+4, r23	; 0x04
    2e96:	6b 83       	std	Y+3, r22	; 0x03
	u8 count = 0;
    2e98:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidWriteCommand((copy_u8Adress*8)+0x40);
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	08 96       	adiw	r24, 0x08	; 8
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	88 0f       	add	r24, r24
    2ea8:	99 1f       	adc	r25, r25
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_voidWriteCommand>
	for(count = 0;count <=7 ;count++)
    2eb2:	19 82       	std	Y+1, r1	; 0x01
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <LCD_voidCreatCustmChar+0x4c>
	{
		LCD_voidWriteChar(customChar[count]);
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	e2 0f       	add	r30, r18
    2ec4:	f3 1f       	adc	r31, r19
    2ec6:	80 81       	ld	r24, Z
    2ec8:	0e 94 48 14 	call	0x2890	; 0x2890 <LCD_voidWriteChar>

void LCD_voidCreatCustmChar(u8 copy_u8Adress,u8 *customChar)
{
	u8 count = 0;
	LCD_voidWriteCommand((copy_u8Adress*8)+0x40);
	for(count = 0;count <=7 ;count++)
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	88 30       	cpi	r24, 0x08	; 8
    2ed6:	78 f3       	brcs	.-34     	; 0x2eb6 <LCD_voidCreatCustmChar+0x30>
	{
		LCD_voidWriteChar(customChar[count]);
	}
}
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <KEYPAD_voidInit>:
		         {'1','2','3','-'},
		         {'C','0','=','+'}};


void KEYPAD_voidInit(void)
{
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(COLOUMN_PORT,COLOUMN_PIN0,Input);
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN_PIN0,High);
    2ef8:	83 e0       	ldi	r24, 0x03	; 3
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinDir(COLOUMN_PORT,COLOUMN_PIN1,Input);
    2f02:	83 e0       	ldi	r24, 0x03	; 3
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN_PIN1,High);
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinDir(COLOUMN_PORT,COLOUMN_PIN2,Input);
    2f16:	83 e0       	ldi	r24, 0x03	; 3
    2f18:	62 e0       	ldi	r22, 0x02	; 2
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN_PIN2,High);
    2f20:	83 e0       	ldi	r24, 0x03	; 3
    2f22:	62 e0       	ldi	r22, 0x02	; 2
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinDir(COLOUMN_PORT,COLOUMN_PIN3,Input);
    2f2a:	83 e0       	ldi	r24, 0x03	; 3
    2f2c:	63 e0       	ldi	r22, 0x03	; 3
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinValue(COLOUMN_PORT,COLOUMN_PIN3,High);
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	63 e0       	ldi	r22, 0x03	; 3
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>

	DIO_voidSetPinDir(ROW_PORT,ROW_PIN0,Output);
    2f3e:	84 e0       	ldi	r24, 0x04	; 4
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(ROW_PORT,ROW_PIN1,Output);
    2f48:	84 e0       	ldi	r24, 0x04	; 4
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(ROW_PORT,ROW_PIN2,Output);
    2f52:	84 e0       	ldi	r24, 0x04	; 4
    2f54:	62 e0       	ldi	r22, 0x02	; 2
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(ROW_PORT,ROW_PIN3,Output);
    2f5c:	84 e0       	ldi	r24, 0x04	; 4
    2f5e:	63 e0       	ldi	r22, 0x03	; 3
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDir>

	DIO_voidSetPinValue(ROW_PORT,ROW_PIN0,High);
    2f66:	84 e0       	ldi	r24, 0x04	; 4
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW_PIN1,High);
    2f70:	84 e0       	ldi	r24, 0x04	; 4
    2f72:	61 e0       	ldi	r22, 0x01	; 1
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW_PIN2,High);
    2f7a:	84 e0       	ldi	r24, 0x04	; 4
    2f7c:	62 e0       	ldi	r22, 0x02	; 2
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(ROW_PORT,ROW_PIN3,High);
    2f84:	84 e0       	ldi	r24, 0x04	; 4
    2f86:	63 e0       	ldi	r22, 0x03	; 3
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <KEYPAD_u8GetValue>:



static u8 KEYPAD_u8GetValue()
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <KEYPAD_u8GetValue+0x6>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <KEYPAD_u8GetValue+0x8>
    2f9c:	0f 92       	push	r0
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	u8 count_C,count_R;
	u8 Value = 0;
    2fa2:	1a 82       	std	Y+2, r1	; 0x02

	for(count_R = 0;count_R < 4 ;count_R++)
    2fa4:	1b 82       	std	Y+3, r1	; 0x03
    2fa6:	61 c0       	rjmp	.+194    	; 0x306a <KEYPAD_u8GetValue+0xd6>
	{
		DIO_voidSetPinValue(ROW_PORT,ROW[count_R],Low);
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	fc 01       	movw	r30, r24
    2fb0:	ea 58       	subi	r30, 0x8A	; 138
    2fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb4:	90 81       	ld	r25, Z
    2fb6:	84 e0       	ldi	r24, 0x04	; 4
    2fb8:	69 2f       	mov	r22, r25
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		for(count_C = 0;count_C < 4 ;count_C++)
    2fc0:	1c 82       	std	Y+4, r1	; 0x04
    2fc2:	40 c0       	rjmp	.+128    	; 0x3044 <KEYPAD_u8GetValue+0xb0>
		{
			u8 getValue = DIO_u8GetPinValue(COLOUMN_PORT,COLOUMN[count_C]);
    2fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc6:	88 2f       	mov	r24, r24
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	fc 01       	movw	r30, r24
    2fcc:	ee 58       	subi	r30, 0x8E	; 142
    2fce:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd0:	90 81       	ld	r25, Z
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	69 2f       	mov	r22, r25
    2fd6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_u8GetPinValue>
    2fda:	89 83       	std	Y+1, r24	; 0x01
			if(getValue == Low)
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	88 23       	and	r24, r24
    2fe0:	71 f5       	brne	.+92     	; 0x303e <KEYPAD_u8GetValue+0xaa>
			{
				while(DIO_u8GetPinValue(COLOUMN_PORT,COLOUMN[count_C]) == Low);
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	fc 01       	movw	r30, r24
    2fea:	ee 58       	subi	r30, 0x8E	; 142
    2fec:	fe 4f       	sbci	r31, 0xFE	; 254
    2fee:	90 81       	ld	r25, Z
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	69 2f       	mov	r22, r25
    2ff4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <DIO_u8GetPinValue>
    2ff8:	88 23       	and	r24, r24
    2ffa:	99 f3       	breq	.-26     	; 0x2fe2 <KEYPAD_u8GetValue+0x4e>
				DIO_voidSetPinValue(ROW_PORT,ROW[count_R],High);
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	fc 01       	movw	r30, r24
    3004:	ea 58       	subi	r30, 0x8A	; 138
    3006:	fe 4f       	sbci	r31, 0xFE	; 254
    3008:	90 81       	ld	r25, Z
    300a:	84 e0       	ldi	r24, 0x04	; 4
    300c:	69 2f       	mov	r22, r25
    300e:	41 e0       	ldi	r20, 0x01	; 1
    3010:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
				Value = KEYPAD[count_C][count_R];
    3014:	8c 81       	ldd	r24, Y+4	; 0x04
    3016:	48 2f       	mov	r20, r24
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	ca 01       	movw	r24, r20
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	82 0f       	add	r24, r18
    302c:	93 1f       	adc	r25, r19
    302e:	fc 01       	movw	r30, r24
    3030:	e6 58       	subi	r30, 0x86	; 134
    3032:	fe 4f       	sbci	r31, 0xFE	; 254
    3034:	80 81       	ld	r24, Z
    3036:	8a 83       	std	Y+2, r24	; 0x02
				return Value;
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	1c c0       	rjmp	.+56     	; 0x3076 <KEYPAD_u8GetValue+0xe2>
	u8 Value = 0;

	for(count_R = 0;count_R < 4 ;count_R++)
	{
		DIO_voidSetPinValue(ROW_PORT,ROW[count_R],Low);
		for(count_C = 0;count_C < 4 ;count_C++)
    303e:	8c 81       	ldd	r24, Y+4	; 0x04
    3040:	8f 5f       	subi	r24, 0xFF	; 255
    3042:	8c 83       	std	Y+4, r24	; 0x04
    3044:	8c 81       	ldd	r24, Y+4	; 0x04
    3046:	84 30       	cpi	r24, 0x04	; 4
    3048:	08 f4       	brcc	.+2      	; 0x304c <KEYPAD_u8GetValue+0xb8>
    304a:	bc cf       	rjmp	.-136    	; 0x2fc4 <KEYPAD_u8GetValue+0x30>
				DIO_voidSetPinValue(ROW_PORT,ROW[count_R],High);
				Value = KEYPAD[count_C][count_R];
				return Value;
			}
		}
		DIO_voidSetPinValue(ROW_PORT,ROW[count_R],High);
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	fc 01       	movw	r30, r24
    3054:	ea 58       	subi	r30, 0x8A	; 138
    3056:	fe 4f       	sbci	r31, 0xFE	; 254
    3058:	90 81       	ld	r25, Z
    305a:	84 e0       	ldi	r24, 0x04	; 4
    305c:	69 2f       	mov	r22, r25
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
static u8 KEYPAD_u8GetValue()
{
	u8 count_C,count_R;
	u8 Value = 0;

	for(count_R = 0;count_R < 4 ;count_R++)
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	8f 5f       	subi	r24, 0xFF	; 255
    3068:	8b 83       	std	Y+3, r24	; 0x03
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	84 30       	cpi	r24, 0x04	; 4
    306e:	08 f4       	brcc	.+2      	; 0x3072 <KEYPAD_u8GetValue+0xde>
    3070:	9b cf       	rjmp	.-202    	; 0x2fa8 <KEYPAD_u8GetValue+0x14>
				return Value;
			}
		}
		DIO_voidSetPinValue(ROW_PORT,ROW[count_R],High);
	}
	return KEYPAD_NO_PRESSED_KEY;
    3072:	8f ef       	ldi	r24, 0xFF	; 255
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <KEYPAD_u8GetKeyValue>:

u8 KEYPAD_u8GetKeyValue(){
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	0f 92       	push	r0
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
	u8 key=KEYPAD_u8GetValue();
    3092:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <KEYPAD_u8GetValue>
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	03 c0       	rjmp	.+6      	; 0x30a0 <KEYPAD_u8GetKeyValue+0x18>
	while(key == 0xff){
		key=KEYPAD_u8GetValue();
    309a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <KEYPAD_u8GetValue>
    309e:	89 83       	std	Y+1, r24	; 0x01
	return KEYPAD_NO_PRESSED_KEY;
}

u8 KEYPAD_u8GetKeyValue(){
	u8 key=KEYPAD_u8GetValue();
	while(key == 0xff){
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	8f 3f       	cpi	r24, 0xFF	; 255
    30a4:	d1 f3       	breq	.-12     	; 0x309a <KEYPAD_u8GetKeyValue+0x12>
		key=KEYPAD_u8GetValue();
	}
	return key;
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a8:	0f 90       	pop	r0
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <EEPROM_voidInit>:
#include "../../MCAL/I2C/I2C_interface.h"
#include "../../MCAL/EXTI/EXTI_interface.h"
#include <util/delay.h>

void EEPROM_voidInit(void)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
	I2C_voidMasterInit();
    30b8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <I2C_voidMasterInit>
}
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <EEPROM_voidSendData>:

void EEPROM_voidSendData(u8 copy_u8Address,u8 copy_u8AddressByte,u8 copy_u8AData)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	61 97       	sbiw	r28, 0x11	; 17
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	8f 87       	std	Y+15, r24	; 0x0f
    30d8:	68 8b       	std	Y+16, r22	; 0x10
    30da:	49 8b       	std	Y+17, r20	; 0x11
	I2C_voidStartCondEnable();
    30dc:	0e 94 18 09 	call	0x1230	; 0x1230 <I2C_voidStartCondEnable>
	I2C_voidWriteSlaveAddress(copy_u8Address);
    30e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e2:	0e 94 54 09 	call	0x12a8	; 0x12a8 <I2C_voidWriteSlaveAddress>
	I2C_voidMasterSendData(copy_u8AddressByte);
    30e6:	88 89       	ldd	r24, Y+16	; 0x10
    30e8:	0e 94 a5 09 	call	0x134a	; 0x134a <I2C_voidMasterSendData>
	I2C_voidMasterSendData(copy_u8AData);
    30ec:	89 89       	ldd	r24, Y+17	; 0x11
    30ee:	0e 94 a5 09 	call	0x134a	; 0x134a <I2C_voidMasterSendData>
    I2C_voidStopCond();
    30f2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <I2C_voidStopCond>
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e2       	ldi	r26, 0x20	; 32
    30fc:	b1 e4       	ldi	r27, 0x41	; 65
    30fe:	8b 87       	std	Y+11, r24	; 0x0b
    3100:	9c 87       	std	Y+12, r25	; 0x0c
    3102:	ad 87       	std	Y+13, r26	; 0x0d
    3104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3106:	6b 85       	ldd	r22, Y+11	; 0x0b
    3108:	7c 85       	ldd	r23, Y+12	; 0x0c
    310a:	8d 85       	ldd	r24, Y+13	; 0x0d
    310c:	9e 85       	ldd	r25, Y+14	; 0x0e
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	4a ef       	ldi	r20, 0xFA	; 250
    3114:	54 e4       	ldi	r21, 0x44	; 68
    3116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	8f 83       	std	Y+7, r24	; 0x07
    3120:	98 87       	std	Y+8, r25	; 0x08
    3122:	a9 87       	std	Y+9, r26	; 0x09
    3124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3126:	6f 81       	ldd	r22, Y+7	; 0x07
    3128:	78 85       	ldd	r23, Y+8	; 0x08
    312a:	89 85       	ldd	r24, Y+9	; 0x09
    312c:	9a 85       	ldd	r25, Y+10	; 0x0a
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	5f e3       	ldi	r21, 0x3F	; 63
    3136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313a:	88 23       	and	r24, r24
    313c:	2c f4       	brge	.+10     	; 0x3148 <EEPROM_voidSendData+0x86>
		__ticks = 1;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	3f c0       	rjmp	.+126    	; 0x31c6 <EEPROM_voidSendData+0x104>
	else if (__tmp > 65535)
    3148:	6f 81       	ldd	r22, Y+7	; 0x07
    314a:	78 85       	ldd	r23, Y+8	; 0x08
    314c:	89 85       	ldd	r24, Y+9	; 0x09
    314e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	3f ef       	ldi	r19, 0xFF	; 255
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	57 e4       	ldi	r21, 0x47	; 71
    3158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	4c f5       	brge	.+82     	; 0x31b2 <EEPROM_voidSendData+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3160:	6b 85       	ldd	r22, Y+11	; 0x0b
    3162:	7c 85       	ldd	r23, Y+12	; 0x0c
    3164:	8d 85       	ldd	r24, Y+13	; 0x0d
    3166:	9e 85       	ldd	r25, Y+14	; 0x0e
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	40 e2       	ldi	r20, 0x20	; 32
    316e:	51 e4       	ldi	r21, 0x41	; 65
    3170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	8d 83       	std	Y+5, r24	; 0x05
    3188:	0f c0       	rjmp	.+30     	; 0x31a8 <EEPROM_voidSendData+0xe6>
    318a:	88 ec       	ldi	r24, 0xC8	; 200
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9c 83       	std	Y+4, r25	; 0x04
    3190:	8b 83       	std	Y+3, r24	; 0x03
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	9c 81       	ldd	r25, Y+4	; 0x04
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <EEPROM_voidSendData+0xd4>
    319a:	9c 83       	std	Y+4, r25	; 0x04
    319c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319e:	8d 81       	ldd	r24, Y+5	; 0x05
    31a0:	9e 81       	ldd	r25, Y+6	; 0x06
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	69 f7       	brne	.-38     	; 0x318a <EEPROM_voidSendData+0xc8>
    31b0:	14 c0       	rjmp	.+40     	; 0x31da <EEPROM_voidSendData+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b2:	6f 81       	ldd	r22, Y+7	; 0x07
    31b4:	78 85       	ldd	r23, Y+8	; 0x08
    31b6:	89 85       	ldd	r24, Y+9	; 0x09
    31b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	8d 81       	ldd	r24, Y+5	; 0x05
    31c8:	9e 81       	ldd	r25, Y+6	; 0x06
    31ca:	9a 83       	std	Y+2, r25	; 0x02
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	9a 81       	ldd	r25, Y+2	; 0x02
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <EEPROM_voidSendData+0x110>
    31d6:	9a 83       	std	Y+2, r25	; 0x02
    31d8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    31da:	61 96       	adiw	r28, 0x11	; 17
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <EEPROM_voidReceiveData>:
u8 EEPROM_voidReceiveData(u8 copy_u8Address,u8 copy_u8AddressByte)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <EEPROM_voidReceiveData+0x6>
    31f2:	0f 92       	push	r0
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	8a 83       	std	Y+2, r24	; 0x02
    31fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Data = 0;
    31fc:	19 82       	std	Y+1, r1	; 0x01
	I2C_voidStartCondEnable();
    31fe:	0e 94 18 09 	call	0x1230	; 0x1230 <I2C_voidStartCondEnable>
	I2C_voidWriteSlaveAddress(copy_u8Address);
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	0e 94 54 09 	call	0x12a8	; 0x12a8 <I2C_voidWriteSlaveAddress>
	I2C_voidMasterSendData(copy_u8AddressByte);
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	0e 94 a5 09 	call	0x134a	; 0x134a <I2C_voidMasterSendData>
    I2C_voidR_StartCondEnable();
    320e:	0e 94 36 09 	call	0x126c	; 0x126c <I2C_voidR_StartCondEnable>
	I2C_voidReadSlaveAddress(copy_u8Address);
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <I2C_voidReadSlaveAddress>
	I2C_u8MasterReceiveData(&Data);
    3218:	ce 01       	movw	r24, r28
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	0e 94 c4 09 	call	0x1388	; 0x1388 <I2C_u8MasterReceiveData>
    I2C_voidStopCond();
    3220:	0e 94 e7 09 	call	0x13ce	; 0x13ce <I2C_voidStopCond>
    return Data ;
    3224:	89 81       	ldd	r24, Y+1	; 0x01
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <main>:
#include "MCAL/ADC/ADC_interface.h"
#include "MCAL/TIMER/TIMER_interface.h"
#include "MCAL/SPI/SPI_interface.h"
#include "MCAL/I2C/I2C_interface.h"
int main()
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62

	I2C_voidMasterInit();
    323a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <I2C_voidMasterInit>
    323e:	ff cf       	rjmp	.-2      	; 0x323e <main+0xc>

00003240 <__udivmodhi4>:
    3240:	aa 1b       	sub	r26, r26
    3242:	bb 1b       	sub	r27, r27
    3244:	51 e1       	ldi	r21, 0x11	; 17
    3246:	07 c0       	rjmp	.+14     	; 0x3256 <__udivmodhi4_ep>

00003248 <__udivmodhi4_loop>:
    3248:	aa 1f       	adc	r26, r26
    324a:	bb 1f       	adc	r27, r27
    324c:	a6 17       	cp	r26, r22
    324e:	b7 07       	cpc	r27, r23
    3250:	10 f0       	brcs	.+4      	; 0x3256 <__udivmodhi4_ep>
    3252:	a6 1b       	sub	r26, r22
    3254:	b7 0b       	sbc	r27, r23

00003256 <__udivmodhi4_ep>:
    3256:	88 1f       	adc	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	5a 95       	dec	r21
    325c:	a9 f7       	brne	.-22     	; 0x3248 <__udivmodhi4_loop>
    325e:	80 95       	com	r24
    3260:	90 95       	com	r25
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	08 95       	ret

00003268 <__divmodhi4>:
    3268:	97 fb       	bst	r25, 7
    326a:	09 2e       	mov	r0, r25
    326c:	07 26       	eor	r0, r23
    326e:	0a d0       	rcall	.+20     	; 0x3284 <__divmodhi4_neg1>
    3270:	77 fd       	sbrc	r23, 7
    3272:	04 d0       	rcall	.+8      	; 0x327c <__divmodhi4_neg2>
    3274:	e5 df       	rcall	.-54     	; 0x3240 <__udivmodhi4>
    3276:	06 d0       	rcall	.+12     	; 0x3284 <__divmodhi4_neg1>
    3278:	00 20       	and	r0, r0
    327a:	1a f4       	brpl	.+6      	; 0x3282 <__divmodhi4_exit>

0000327c <__divmodhi4_neg2>:
    327c:	70 95       	com	r23
    327e:	61 95       	neg	r22
    3280:	7f 4f       	sbci	r23, 0xFF	; 255

00003282 <__divmodhi4_exit>:
    3282:	08 95       	ret

00003284 <__divmodhi4_neg1>:
    3284:	f6 f7       	brtc	.-4      	; 0x3282 <__divmodhi4_exit>
    3286:	90 95       	com	r25
    3288:	81 95       	neg	r24
    328a:	9f 4f       	sbci	r25, 0xFF	; 255
    328c:	08 95       	ret

0000328e <__prologue_saves__>:
    328e:	2f 92       	push	r2
    3290:	3f 92       	push	r3
    3292:	4f 92       	push	r4
    3294:	5f 92       	push	r5
    3296:	6f 92       	push	r6
    3298:	7f 92       	push	r7
    329a:	8f 92       	push	r8
    329c:	9f 92       	push	r9
    329e:	af 92       	push	r10
    32a0:	bf 92       	push	r11
    32a2:	cf 92       	push	r12
    32a4:	df 92       	push	r13
    32a6:	ef 92       	push	r14
    32a8:	ff 92       	push	r15
    32aa:	0f 93       	push	r16
    32ac:	1f 93       	push	r17
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	ca 1b       	sub	r28, r26
    32b8:	db 0b       	sbc	r29, r27
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	09 94       	ijmp

000032c6 <__epilogue_restores__>:
    32c6:	2a 88       	ldd	r2, Y+18	; 0x12
    32c8:	39 88       	ldd	r3, Y+17	; 0x11
    32ca:	48 88       	ldd	r4, Y+16	; 0x10
    32cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32d8:	b9 84       	ldd	r11, Y+9	; 0x09
    32da:	c8 84       	ldd	r12, Y+8	; 0x08
    32dc:	df 80       	ldd	r13, Y+7	; 0x07
    32de:	ee 80       	ldd	r14, Y+6	; 0x06
    32e0:	fd 80       	ldd	r15, Y+5	; 0x05
    32e2:	0c 81       	ldd	r16, Y+4	; 0x04
    32e4:	1b 81       	ldd	r17, Y+3	; 0x03
    32e6:	aa 81       	ldd	r26, Y+2	; 0x02
    32e8:	b9 81       	ldd	r27, Y+1	; 0x01
    32ea:	ce 0f       	add	r28, r30
    32ec:	d1 1d       	adc	r29, r1
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	ed 01       	movw	r28, r26
    32fa:	08 95       	ret

000032fc <_exit>:
    32fc:	f8 94       	cli

000032fe <__stop_program>:
    32fe:	ff cf       	rjmp	.-2      	; 0x32fe <__stop_program>
